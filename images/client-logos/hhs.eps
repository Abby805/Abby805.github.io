%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: DeptHealth&HumanServices_USA.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Bonnie L. Down
%%CreationDate: 4/8/11
%%BoundingBox: 0 0 199 199
%%HiResBoundingBox: 0 0 198.4551 198.8580
%%CropBox: 0 0 198.4551 198.8580
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">XXX_logo</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2011-04-08T16:41:21-04:00</xap:CreateDate>
         <xap:ModifyDate>2011-04-08T16:41:21-04:00</xap:ModifyDate>
         <xap:MetadataDate>2011-04-08T16:41:21-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUJq2q6fpOnXGpajMtvZWy85pW6AdAABuSSaADcnYZOEDMgDmUSkALLG7P8wHvdZh0j9DX2&#xA;mz39vNLpdzqUaxRTSxLy9OiNI6/D8RqAaA7ZkS0tR4uIGjvTUMtmqIYpH5x8231x5ptdc1y18rp5&#xA;ZZEnms7Q3BdJ1Zo5QZ2kY7LUBUqcyjp8cRAxiZ8fef1NQyyPECeHhd+a9n5ltvyqTVptVubfXNOh&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:36738370627F11E08BD4E44818744834</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:36738371627F11E08BD4E44818744834</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:ea65992f-5d3d-419f-8e91-f73e259d69af</stRef:instanceID>
            <stRef:documentID>uuid:417F53B46BE011DF9BEBCAF6007C82E3</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3.000000</stDim:w>
            <stDim:h>3.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=94 M=68 Y=1 K=0</xapG:swatchName>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>94.000000</xapG:cyan>
                           <xapG:magenta>68.000000</xapG:magenta>
                           <xapG:yellow>1.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -198.858 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 198.858 li
198.455 198.858 li
198.455 0 li
cp
clp
[1 0 0 1 0 0 ]ct
177.581 32.9619 mo
177.901 39.8086 172.473 44.043 168.366 48.0654 cv
126.257 83.5059 li
122.472 87.0293 117.004 89.9424 114.873 95.2236 cv
112.082 102.202 111.042 109.956 109.841 117.663 cv
109.158 123.219 103.965 128.051 99.1377 130.092 cv
95.3818 131.405 90.877 130.786 86.7813 131.104 cv
72.1016 131.202 li
70.8643 131.467 69.7871 132.149 69.1455 133.157 cv
68.6016 134.614 li
67.0293 134.846 67.5488 133.473 67.3252 132.508 cv
67.3682 129.282 68.0859 125.909 70.4688 124.006 cv
71.7363 122.713 73.5254 122.401 75.3047 122.112 cv
96.707 121.801 li
97.8994 121.752 98.8623 121.036 99.6729 120.409 cv
100.54 118.754 li
102.251 108.086 103.234 97.041 108.526 87.9785 cv
113.45 82.2295 119.657 78.2725 125.14 73.2148 cv
137.842 62.4277 151.007 51.4639 163.554 40.5195 cv
167.107 37.1621 170.863 32.7295 171.739 27.416 cv
172.204 25.9922 li
175.024 26.9502 177.396 29.7627 177.581 32.9619 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.94 0.68 0.01 0 cmyk
f
189.924 44.9932 mo
190.556 51.6445 185.337 54.7979 181.18 58.9121 cv
164.001 73.6699 li
133.457 99.6035 li
129.125 104.487 128.904 111.407 127.796 117.663 cv
127.979 119.702 130.034 120.532 129.633 122.668 cv
125.385 130.325 li
125.617 133.372 129.343 131.606 130.546 133.514 cv
130.584 134.61 129.854 135.977 130.72 136.891 cv
131.314 137.94 133.769 136.534 132.483 138.213 cv
132.133 138.489 132.265 139.168 132.369 139.534 cv
132.879 140.204 133.828 140.264 133.914 141.262 cv
133.457 142.542 133.457 144.321 134.22 145.422 cv
139.518 151.204 148.64 144.045 154.165 149.473 cv
155.558 150.706 155.519 152.997 155.149 154.719 cv
152.199 163.368 134.739 164.006 140.712 176.274 cv
141.752 178.278 144.074 179.635 146.396 179.792 cv
148.364 180.108 149.875 179.28 151.51 178.782 cv
152.02 178.782 152.06 179.28 152.271 179.557 cv
152.271 179.887 li
147.222 183.481 140.712 188.766 134.005 184.934 cv
130.67 182.801 128.938 178.424 129.764 174.178 cv
131.813 167.389 139.623 165.657 143.528 159.961 cv
144.431 158.307 144.266 156.149 143.303 154.483 cv
142.059 152.256 139.172 151.659 136.649 151.204 cv
132.453 151.11 126.027 153.76 124.162 148.836 cv
123.617 146.958 125.526 143.643 122.523 143.211 cv
122.113 142.684 121.159 142.215 121.655 141.362 cv
121.797 140.866 122.654 140.805 122.212 140.165 cv
121.616 139.993 120.824 140.131 120.343 139.62 cv
118.639 137.758 123.335 135.743 120.155 134.469 cv
118.542 134.249 116.361 135.442 115.319 133.604 cv
114.813 131.883 116.102 130.649 116.739 129.243 cv
117.816 126.829 120.968 125.231 120.155 122.112 cv
118.594 119.471 li
119.056 113.29 120.102 107.252 121.655 101.428 cv
123.752 94.957 129.998 91.3477 134.78 86.9004 cv
160.396 65.2441 li
178.533 49.2832 li
181.679 46.3652 184.42 43.0811 184.313 38.6592 cv
185.274 38.335 185.917 39.4932 186.755 39.8535 cv
188.259 41.583 189.557 42.8096 189.924 44.9932 cv
f
183.045 77.2666 mo
179.672 82.6484 174.027 86.7002 169.014 90.9561 cv
149.318 107.463 li
145.705 110.727 144.751 116.387 146.396 120.799 cv
146.581 123.036 144.852 124.448 144.309 126.413 cv
144.364 126.995 144.48 127.737 145.077 127.909 cv
145.898 128.233 147.136 127.815 147.594 128.905 cv
147.714 130.059 147.188 131.295 148.459 131.743 cv
148.962 132.026 149.718 131.141 149.77 132.059 cv
149.458 132.569 149.237 133.055 149.318 133.698 cv
149.963 134.846 151.368 134.213 151.95 135.165 cv
152.199 136.495 152.199 138.209 153.699 138.766 cv
158.806 139.62 162.678 136.161 167.284 135.165 cv
174.58 132.881 181.636 135.739 188.146 137.676 cv
191.387 138.254 194.992 138.063 198.226 137.676 cv
198.455 137.887 li
194.309 142.948 189.202 147.87 181.949 147.374 cv
174.339 147.092 169.43 139.993 161.269 141.362 cv
155.744 142.459 150.233 145.778 144.309 143.547 cv
142.796 142.319 142.164 140.131 142.751 137.973 cv
142.465 136.661 139.296 136.338 141.267 134.614 cv
140.66 134.213 139.623 134.614 139.296 133.698 cv
138.834 132.649 140.114 131.104 138.739 130.415 cv
137.513 130.233 135.928 130.917 135.01 129.877 cv
134.51 129.243 134.6 128.364 134.784 127.596 cv
135.659 125.5 138.024 123.848 137.513 121.356 cv
135.928 119.856 136.454 117.329 136.649 115.239 cv
137.554 110.407 137.923 105.305 142.42 102.1 cv
166.637 81.6367 li
171.739 76.7686 178.043 73.6143 181.732 67.1992 cv
183.638 69.835 184.549 74.0957 183.045 77.2666 cv
f
108.988 148.918 mo
115.865 151.834 123.073 154.719 129.211 158.772 cv
130.724 159.999 132.099 161.866 131.817 164.133 cv
129.712 172.838 117.595 173.766 119.376 184.032 cv
119.922 187.852 122.422 191.192 126.163 192.239 cv
127.857 192.727 130.124 192.727 131.817 192.239 cv
132.099 192.911 133.28 193.547 131.946 194 cv
126.983 197.176 120.606 200.747 114.544 197.698 cv
111.583 196.334 109.839 193.127 109.069 190.047 cv
107.841 180.737 116.503 177.807 120.891 171.581 cv
121.552 170.348 121.87 168.883 121.552 167.428 cv
120.703 165.69 119.477 164.618 117.816 163.592 cv
101.499 154.448 83.7676 148.276 65.5469 143.547 cv
62.5283 143.258 57.8398 141.497 55.8311 145.008 cv
55.8311 145.172 li
54.2002 145.518 54.8262 143.547 54.8262 142.68 cv
55.3389 139.717 57.0645 137.307 59.8486 136.104 cv
64.582 134.704 69.6006 136.383 74.1963 137.206 cv
85.9893 140.526 97.7275 144.239 108.988 148.918 cv
f
101.879 187.733 mo
101.868 187.2 101.773 187.161 100.893 187.167 cv
98.3018 187.215 97.2578 188.434 97.3223 191.34 cv
97.3926 194.305 98.4824 195.407 101.066 195.352 cv
101.939 195.333 102.031 195.272 102.031 195.006 cv
101.879 187.733 li
cp
105.073 187.004 mo
103.608 187.125 103.553 187.167 103.503 187.542 cv
103.443 188.002 103.469 189.086 103.514 191.172 cv
103.574 193.243 103.583 194.325 103.643 194.795 cv
103.709 195.163 103.776 195.204 105.237 195.268 cv
105.248 195.844 li
100.631 195.93 li
98.7402 195.979 97.8438 195.583 96.9648 194.766 cv
96.1553 194.053 95.5928 192.881 95.5684 191.366 cv
95.5342 188.997 96.957 186.602 100.637 186.528 cv
105.044 186.44 li
105.073 187.004 li
cp
f
94.7266 187.141 mo
93.457 187.129 93.3965 187.167 93.3213 187.542 cv
93.2354 187.989 93.1172 189.057 92.9561 191.172 cv
92.791 193.235 92.6895 194.29 92.707 194.766 cv
92.7246 195.137 92.7754 195.178 94.0195 195.381 cv
93.9785 195.956 li
88.917 195.524 li
88.1484 195.454 87.3809 195.467 86.8115 195.522 cv
86.8418 194.86 86.8418 193.313 86.7861 192.936 cv
87.3809 192.885 li
87.5977 194.663 87.8643 194.881 89.7461 195.024 cv
90.9521 195.125 li
91.1064 195.137 91.1924 195.073 91.2207 194.881 cv
91.4824 191.813 li
91.4932 191.633 91.4609 191.577 91.0615 191.534 cv
90.6748 191.516 li
89.2305 191.374 89.1104 191.608 88.8916 192.54 cv
88.3135 192.495 li
88.3691 192.049 88.4336 191.622 88.4834 190.979 cv
88.5264 190.434 88.5391 189.842 88.5605 189.452 cv
89.1768 189.502 li
89.1768 190.495 89.332 190.731 90.3691 190.817 cv
91.3066 190.907 li
91.4609 190.915 91.5508 190.86 91.5645 190.678 cv
91.8584 187.252 li
91.8887 187.069 91.7979 186.985 91.6328 186.985 cv
89.3516 186.78 li
88.2725 186.68 87.9521 186.961 87.6172 187.821 cv
87.2324 188.719 li
86.6289 188.497 li
86.8721 187.774 87.1406 186.528 87.2197 185.938 cv
94.7695 186.581 li
94.7266 187.141 li
cp
f
82.1836 190.151 mo
81.9561 190.09 81.7715 190.043 81.5527 190.008 cv
80.2227 189.776 78.9551 189.776 78.624 191.547 cv
78.3125 193.208 79.3457 193.649 80.79 193.922 cv
81.4063 194.03 81.4668 193.959 81.5264 193.717 cv
82.1836 190.151 li
cp
86.0488 186.403 mo
84.6758 186.249 84.5986 186.268 84.4824 186.614 cv
84.3457 187.053 84.1348 188.133 83.7568 190.178 cv
83.3828 192.239 83.1807 193.292 83.1504 193.76 cv
83.1504 194.122 83.207 194.174 84.543 194.54 cv
84.4395 195.096 li
79.5713 194.194 li
78.5635 194 77.8359 193.608 77.3652 193.028 cv
76.9502 192.543 76.7695 191.915 76.8838 191.223 cv
77.2559 189.362 79.0039 188.866 81.3721 189.301 cv
81.7266 189.374 82.1084 189.477 82.3047 189.506 cv
82.8848 186.331 li
82.9551 185.967 82.8281 185.903 81.3203 185.516 cv
81.4063 184.959 li
86.1436 185.838 li
86.0488 186.403 li
cp
f
72.3633 186.749 mo
72.2578 186.719 72.207 186.749 72.1982 186.782 cv
72.1826 186.842 72.1875 187 72.1875 187.096 cv
72.5244 190.692 li
74.75 187.733 li
74.7979 187.655 74.8574 187.602 74.8711 187.547 cv
74.8838 187.483 74.8408 187.452 74.75 187.413 cv
72.3633 186.749 li
cp
78.8457 185.155 mo
77.7881 184.936 77.5264 185.211 76.7939 186.178 cv
72.9697 191.196 li
72.3311 192.034 72.1641 192.256 71.8975 192.7 cv
71.2051 192.497 li
71.2588 192.081 71.2051 191.288 71.1602 190.829 cv
70.3486 183.821 li
70.2578 182.875 70.1982 182.708 69.1084 182.418 cv
69.2695 181.854 li
73.7061 183.116 li
73.5449 183.653 li
72.2363 183.34 72.0908 183.44 72.0029 183.768 cv
71.9277 184.034 72.0781 185.643 72.1016 185.807 cv
72.127 185.879 72.1826 185.928 72.2432 185.963 cv
72.5723 186.088 73.2168 186.301 74.5078 186.661 cv
75.3389 186.895 75.3906 186.842 75.582 186.614 cv
76.123 185.903 76.5225 185.266 76.5635 185.147 cv
76.6797 184.735 76.5547 184.614 75.3457 184.165 cv
75.5156 183.612 li
78.9893 184.614 li
78.8457 185.155 li
cp
f
64.2061 185.592 mo
64.2832 185.362 64.2832 185.286 63.5137 184.959 cv
61.6748 184.204 60.8711 185.116 60.5879 185.823 cv
60.1621 186.84 60.6484 187.864 61.9648 188.422 cv
62.833 188.766 62.8936 188.764 63.0283 188.44 cv
64.2061 185.592 li
cp
68.7988 182.288 mo
67.5313 181.877 67.4541 181.883 67.2803 182.208 cv
67.0293 182.606 66.6465 183.598 65.8555 185.528 cv
65.0527 187.477 64.6523 188.465 64.5322 188.917 cv
64.4209 189.272 64.4873 189.342 65.6563 189.94 cv
65.4395 190.469 li
60.8135 188.573 li
59.8506 188.17 59.4082 187.834 59.0693 187.286 cv
58.708 186.749 58.6523 186.073 58.9727 185.325 cv
59.7051 183.487 61.8447 183.983 61.8857 183.877 cv
61.9072 183.821 61.9072 183.708 61.8516 183.502 cv
60.9619 180.002 li
60.7471 179.106 60.6563 178.948 60.0811 178.7 cv
60.2803 178.172 li
62.3408 179.026 li
63.4092 184.038 li
63.46 184.204 63.5293 184.268 64.0469 184.463 cv
64.5322 184.665 64.5732 184.674 64.627 184.549 cv
65.5469 182.305 65.6836 181.952 65.7764 181.586 cv
65.8906 181.245 65.834 181.161 64.6523 180.579 cv
64.874 180.049 li
69.0225 181.752 li
68.7988 182.288 li
cp
f
59.2793 178.227 mo
57.9492 177.631 57.8594 177.631 57.6357 177.936 cv
57.4941 178.172 57.249 178.583 56.8818 179.28 cv
54.0205 184.786 li
55.3926 185.508 li
55.7988 185.723 56.1553 185.463 57.3545 184.329 cv
57.8594 184.737 li
57.4941 185.151 57.0645 185.776 56.4521 186.872 cv
56.2305 186.704 56.0293 186.571 55.79 186.411 cv
55.5781 186.27 55.3633 186.12 55.1182 186.018 cv
50.9932 183.874 li
50.4941 183.618 50.0088 183.43 49.5273 183.26 cv
50.0537 182.137 50.3271 181.426 50.4668 180.891 cv
51.0791 181.053 li
50.8467 182.704 50.8359 183.147 51.249 183.366 cv
52.6211 184.073 li
55.5 178.563 li
55.8594 177.858 56.0615 177.42 56.1748 177.165 cv
56.2764 176.809 56.2305 176.745 54.998 175.993 cv
55.2578 175.485 li
59.5439 177.708 li
59.2793 178.227 li
cp
f
53.1025 175.135 mo
51.8477 174.387 51.7646 174.387 51.5127 174.647 cv
51.2168 175.004 50.6064 175.903 49.4287 177.616 cv
48.252 179.334 47.6504 180.233 47.418 180.635 cv
47.2637 180.981 47.293 181.049 48.4453 181.952 cv
48.125 182.418 li
45.1318 180.375 li
45.1533 180.29 45.2441 180.135 45.2871 180.002 cv
47.2158 172.815 li
47.1885 172.795 li
40.8008 177.42 li
37.8379 175.405 li
38.1797 174.918 li
39.4365 175.672 39.5117 175.688 39.7568 175.405 cv
40.0488 175.049 40.6807 174.149 41.8428 172.422 cv
43.0225 170.713 43.6475 169.815 43.8477 169.401 cv
44.0381 169.083 43.9932 169.002 42.8418 168.096 cv
43.1426 167.62 li
47.0352 170.282 li
46.7217 170.754 li
45.502 170.042 45.3838 170.042 45.2031 170.317 cv
40.9727 176.512 li
40.9727 176.514 li
47.5791 171.75 li
47.7686 171.61 47.9512 171.485 48.1504 171.309 cv
48.9824 171.881 li
48.9326 172 48.8428 172.211 48.7861 172.432 cv
46.6553 180.395 li
46.6621 180.418 li
50.2148 175.241 li
50.4512 174.901 50.7266 174.36 50.8213 174.163 cv
50.9775 173.836 50.9521 173.77 49.9297 172.95 cv
50.25 172.483 li
53.4482 174.647 li
53.1025 175.135 li
cp
f
42.7041 167.84 mo
41.707 167.075 41.6211 167.075 41.3467 167.315 cv
40.9814 167.62 40.2939 168.442 38.9277 170.016 cv
37.542 171.596 36.8301 172.409 36.5684 172.778 cv
36.3682 173.09 36.3838 173.155 37.2773 174.059 cv
36.8818 174.489 li
33.0625 171.135 li
32.4775 170.653 31.8457 170.196 31.3672 169.897 cv
31.8027 169.395 32.7012 168.137 32.875 167.807 cv
33.376 168.096 li
32.5146 169.676 32.6152 169.999 34.0332 171.245 cv
34.9443 172.038 li
35.0771 172.143 35.165 172.131 35.3115 171.997 cv
37.3271 169.684 li
37.4473 169.545 37.4619 169.465 37.1416 169.213 cv
36.8818 168.965 li
35.7773 167.997 35.5459 168.108 34.8262 168.733 cv
34.3682 168.348 li
34.6797 168.026 34.9658 167.735 35.4082 167.225 cv
35.7773 166.823 36.1494 166.336 36.3838 166.045 cv
36.8516 166.442 li
36.2549 167.235 36.2373 167.52 37.041 168.213 cv
37.7246 168.842 li
37.8535 168.934 37.958 168.965 38.0791 168.815 cv
40.3408 166.231 li
40.4746 166.106 40.4482 165.981 40.335 165.86 cv
38.5859 164.36 li
37.7783 163.639 37.3613 163.686 36.5811 164.172 cv
35.7773 164.698 li
35.4014 164.133 li
36.0098 163.686 36.9697 162.836 37.3936 162.417 cv
43.0869 167.405 li
42.7041 167.84 li
cp
f
36.2373 162.198 mo
35.2861 161.315 35.2021 161.293 34.9053 161.504 cv
34.5361 161.788 33.7324 162.518 32.1982 163.942 cv
30.6797 165.356 29.8721 166.1 29.582 166.45 cv
29.3301 166.729 29.3623 166.827 30.1748 167.84 cv
29.7617 168.213 li
27.8584 166.186 li
27.9277 166.026 27.9658 165.776 28.0322 165.475 cv
29.6973 158.17 li
29.6826 158.157 li
28.1465 159.581 li
26.625 161.002 25.8301 161.727 25.5254 162.088 cv
25.291 162.368 25.2998 162.479 26.2344 163.592 cv
25.8115 163.981 li
23.209 161.194 li
23.6348 160.799 li
24.4873 161.715 24.627 161.747 25.1855 161.293 cv
25.7422 160.813 26.374 160.256 26.915 159.776 cv
28.8301 157.979 30.4346 156.467 31.1611 155.665 cv
31.8291 156.389 li
31.4316 157.516 31.1797 158.411 30.9355 159.633 cv
29.7109 165.262 li
29.7275 165.276 li
31.7168 163.43 li
33.251 162.014 34.0371 161.293 34.3594 160.922 cv
34.585 160.627 34.5703 160.551 33.5137 159.278 cv
33.9473 158.893 li
36.6543 161.817 li
36.2373 162.198 li
cp
f
28.293 153.292 mo
27.334 152.17 27.2656 152.151 26.9453 152.321 cv
26.7031 152.467 26.3076 152.733 25.6758 153.208 cv
20.6934 156.948 li
21.6191 158.178 li
21.8926 158.543 22.3223 158.465 23.918 157.975 cv
24.1865 158.543 li
23.6758 158.772 23.0137 159.157 21.9912 159.848 cv
21.8477 159.622 21.7314 159.374 21.6006 159.157 cv
21.4561 158.942 21.3057 158.708 21.1494 158.502 cv
18.3838 154.797 li
18.0234 154.333 17.6748 153.95 17.3057 153.604 cv
18.2832 152.823 18.8525 152.295 19.2002 151.885 cv
19.6641 152.295 li
18.7344 153.694 18.5537 154.061 18.8184 154.448 cv
19.7461 155.68 li
24.7344 151.956 li
25.3604 151.479 25.7314 151.163 25.9375 150.993 cv
26.1982 150.727 26.1982 150.651 25.3896 149.418 cv
25.8564 149.081 li
28.7441 152.932 li
28.293 153.292 li
cp
f
19.5352 139.579 mo
18.8779 138.305 17.0645 137.858 14.5127 139.217 cv
11.9668 140.565 11.3154 142.293 11.9941 143.583 cv
12.6689 144.846 14.4678 145.288 17.0195 143.94 cv
19.5762 142.602 20.2168 140.852 19.5352 139.579 cv
11.4248 143.877 mo
10.25 141.665 11.0947 139.036 13.6963 137.676 cv
16.2979 136.293 18.9424 137.063 20.1221 139.262 cv
21.2842 141.481 20.4268 144.118 17.8408 145.508 cv
15.2383 146.866 12.5723 146.084 11.4248 143.877 cv
f
16.9746 134.872 mo
16.4229 133.747 16.377 133.708 16.0078 133.803 cv
15.5566 133.903 14.5615 134.325 12.6367 135.112 cv
10.6836 135.883 9.69531 136.293 9.27051 136.534 cv
8.94336 136.706 8.9375 136.77 9.30859 137.969 cv
8.80664 138.172 li
6.8916 133.473 li
6.60156 132.758 6.23047 132.059 5.96191 131.586 cv
6.54199 131.34 7.93652 130.629 8.24121 130.403 cv
8.55273 130.885 li
7.07227 131.913 7.0127 132.239 7.72559 133.981 cv
8.16992 135.112 li
8.23438 135.258 8.33789 135.301 8.52246 135.233 cv
11.3691 134.088 li
11.5195 134.018 11.5752 133.954 11.4248 133.596 cv
11.2832 133.225 li
10.7334 131.887 10.4902 131.887 9.55859 132.118 cv
9.33008 131.563 li
9.74121 131.405 10.1465 131.274 10.7422 131.026 cv
11.2793 130.819 11.8145 130.594 12.1553 130.438 cv
12.3877 130.991 li
11.5049 131.42 11.3691 131.682 11.7451 132.649 cv
12.1104 133.51 li
12.1553 133.665 12.2412 133.729 12.4375 133.653 cv
15.4561 132.424 li
15.8018 132.299 15.791 132.178 15.3164 130.739 cv
15.8359 130.53 li
17.5205 134.643 li
16.9746 134.872 li
cp
f
12.6777 123.567 mo
12.2764 122.231 12.2051 122.182 11.8311 122.221 cv
11.3926 122.272 10.332 122.518 8.29688 122.991 cv
6.25586 123.467 5.22949 123.725 4.77832 123.872 cv
4.43164 124.002 4.39746 124.086 4.65137 125.452 cv
4.06055 125.573 li
3.00098 121.036 li
3.56445 120.889 li
3.96582 122.221 4.01953 122.292 4.39746 122.231 cv
4.66602 122.221 5.46289 122.043 6.09961 121.903 cv
6.9668 121.702 li
7.36914 121.602 7.39453 121.559 7.31934 121.209 cv
6.51172 117.75 li
6.42969 117.415 6.36133 117.395 5.98145 117.481 cv
5.09766 117.674 li
4.48145 117.842 3.69531 118.032 3.43555 118.114 cv
3.06348 118.256 3.05664 118.333 3.27441 119.696 cv
2.73047 119.829 li
1.64355 115.295 li
2.22168 115.145 li
2.62695 116.463 2.67676 116.553 3.03125 116.493 cv
3.5127 116.446 4.56738 116.188 6.59375 115.725 cv
8.62598 115.243 9.67383 115.002 10.1172 114.838 cv
10.4668 114.708 10.4902 114.629 10.2676 113.268 cv
10.8232 113.137 li
11.8809 117.692 li
11.3242 117.831 li
10.918 116.493 10.873 116.428 10.5078 116.477 cv
10.1172 116.508 9.04297 116.752 7.49609 117.125 cv
7.11328 117.211 7.06836 117.258 7.15234 117.602 cv
7.95996 121.061 li
8.03516 121.409 8.09082 121.44 8.48828 121.348 cv
10.0156 120.995 11.0879 120.723 11.4531 120.592 cv
11.8057 120.463 11.8311 120.37 11.5996 119.004 cv
12.1768 118.877 li
13.2344 123.45 li
12.6777 123.567 li
cp
f
10.2607 112.825 mo
10.0049 111.586 9.96191 111.54 9.58398 111.54 cv
9.11328 111.553 8.0498 111.665 5.97852 111.905 cv
3.90527 112.167 2.82715 112.282 2.38281 112.403 cv
2.02539 112.483 1.98047 112.542 2.05176 113.809 cv
1.4668 113.877 li
0.857422 108.838 li
0.775391 108.067 0.59668 107.297 0.461914 106.778 cv
1.09766 106.672 2.62305 106.358 2.97754 106.237 cv
3.14746 106.778 li
1.4502 107.374 1.29785 107.655 1.53418 109.53 cv
1.66895 110.749 li
1.69043 110.915 1.79395 110.979 1.98047 110.963 cv
5.0332 110.586 li
5.22656 110.563 5.26367 110.532 5.22656 110.131 cv
5.17773 109.764 li
5.00391 108.313 4.75195 108.227 3.7832 108.211 cv
3.72266 107.643 li
4.16992 107.584 4.57813 107.569 5.24414 107.483 cv
5.78125 107.424 6.3916 107.325 6.76074 107.254 cv
6.81641 107.856 li
5.85449 108.067 5.65039 108.282 5.77441 109.309 cv
5.88867 110.237 li
5.91016 110.407 5.9707 110.471 6.16113 110.463 cv
9.55859 110.045 li
9.73828 110.026 9.82031 109.946 9.80957 109.776 cv
9.54102 107.483 li
9.40332 106.413 9.08301 106.176 8.15723 105.997 cv
7.20313 105.829 li
7.30273 105.18 li
8.0498 105.264 9.33008 105.284 9.93164 105.229 cv
10.8232 112.733 li
10.2607 112.825 li
cp
f
5.82422 98.8301 mo
5.82422 98.7119 5.79004 98.665 5.75977 98.665 cv
5.67773 98.665 5.53809 98.7207 5.4502 98.751 cv
2.10938 100.09 li
5.5791 101.383 li
5.66992 101.419 5.75977 101.438 5.80957 101.438 cv
5.85449 101.438 5.87109 101.368 5.87109 101.282 cv
5.82422 98.8301 li
cp
9.22266 104.547 mo
9.12891 103.502 8.80859 103.323 7.63965 102.891 cv
1.76367 100.676 li
0.766602 100.3 0.510742 100.187 0.00585938 100.065 cv
0 99.3525 li
0.40625 99.2969 1.14941 99.0215 1.58301 98.8301 cv
8.07129 96.04 li
8.93262 95.6875 9.08984 95.5889 9.06445 94.4541 cv
9.63086 94.4502 li
9.7041 99.0557 li
9.12891 99.0557 li
9.06445 97.7021 8.92676 97.6035 8.58301 97.6035 cv
8.30176 97.6035 6.81641 98.21 6.6709 98.3037 cv
6.59766 98.3496 6.56152 98.3945 6.54199 98.4756 cv
6.52246 98.8066 6.51172 99.4922 6.52246 100.86 cv
6.54199 101.707 6.61035 101.744 6.89844 101.857 cv
7.72559 102.18 8.45801 102.37 8.58301 102.37 cv
8.98926 102.352 9.08984 102.213 9.16699 100.932 cv
9.72559 100.921 li
9.80078 104.534 li
9.22266 104.547 li
cp
f
9.12402 94.1279 mo
9.12402 92.8359 9.10742 92.75 8.72852 92.7012 cv
8.28613 92.6152 7.20801 92.5293 5.13281 92.3291 cv
3.06152 92.1484 1.98047 92.0586 1.50391 92.0693 cv
1.13672 92.0693 1.09375 92.1484 0.886719 93.4121 cv
0.295898 93.3623 li
0.6875 89.0469 li
1.24414 89.085 li
1.23926 90.3848 1.26758 90.4541 1.64355 90.5244 cv
1.93164 90.5801 2.72656 90.6602 3.3623 90.7305 cv
8.72266 91.1904 li
9.19727 91.2227 9.29785 91.1006 9.34961 90.7012 cv
9.46387 89.1563 li
9.58398 87.8545 9.2041 87.6113 7.39941 86.7002 cv
7.63281 86.1074 li
8.09082 86.3096 9.67383 86.6406 10.3359 86.7236 cv
9.69531 94.1602 li
9.12402 94.1279 li
cp
f
10.0049 85.2373 mo
10.1553 83.7832 10.1406 83.7158 9.76855 83.6025 cv
9.50879 83.5205 9.04297 83.415 8.26465 83.2754 cv
2.125 82.2188 li
1.89063 83.7529 li
1.79395 84.2188 2.1416 84.4639 3.59375 85.2656 cv
3.36426 85.8691 li
2.85742 85.6631 2.11621 85.4482 0.913086 85.1855 cv
0.986328 84.9258 1.06348 84.6787 1.12305 84.4082 cv
1.19824 84.1592 1.24414 83.9014 1.2998 83.6475 cv
2.0791 79.0693 li
2.18457 78.5039 2.22949 77.9775 2.22949 77.4941 cv
3.43555 77.6553 4.22559 77.6875 4.75879 77.6709 cv
4.80176 78.3018 li
3.1582 78.5898 2.7373 78.6885 2.65332 79.1445 cv
2.39063 80.6846 li
8.53125 81.748 li
9.29785 81.877 9.78125 81.9287 10.0498 81.9375 cv
10.418 81.9629 10.4863 81.8926 10.8232 80.4785 cv
11.3887 80.5732 li
10.5469 85.3252 li
10.0049 85.2373 li
cp
f
11.0449 78.79 mo
11.3242 77.4453 11.3135 77.3457 10.9717 77.2061 cv
10.5332 77.0264 9.49805 76.7334 7.49609 76.1533 cv
5.47852 75.5996 4.44531 75.3047 3.99414 75.2217 cv
3.61328 75.165 3.55957 75.2295 3.08301 76.5342 cv
2.53711 76.3682 li
3.80859 71.8867 li
4.36133 72.0371 li
4.08008 73.3867 4.10547 73.4814 4.44531 73.6143 cv
4.70703 73.7256 5.47852 73.9668 6.10156 74.1475 cv
6.9668 74.3965 li
7.32813 74.499 7.39453 74.4775 7.50391 74.1387 cv
8.4707 70.7266 li
8.54883 70.3789 8.53125 70.3271 8.14063 70.2217 cv
7.25488 69.9746 li
6.66602 69.79 5.87598 69.6094 5.59863 69.541 cv
5.22949 69.4805 5.1543 69.5605 4.69238 70.8604 cv
4.14453 70.6963 li
5.41797 66.2061 li
5.9707 66.3564 li
5.69531 67.7256 5.70801 67.8008 6.0498 67.9404 cv
6.49707 68.1123 7.52539 68.4063 9.53027 68.9844 cv
11.543 69.541 12.5664 69.835 13.0391 69.9209 cv
13.3994 69.9746 13.4512 69.9209 13.9326 68.6172 cv
14.4824 68.7588 li
13.2188 73.2744 li
12.6475 73.1133 li
12.9395 71.7705 12.9141 71.6699 12.5723 71.5391 cv
12.2266 71.3838 11.1631 71.0703 9.64844 70.6387 cv
9.26367 70.5381 9.2041 70.5762 9.10254 70.8789 cv
8.13184 74.3125 li
8.03516 74.6436 8.07617 74.7031 8.4707 74.8193 cv
9.98145 75.2383 11.0449 75.5225 11.4248 75.5996 cv
11.7842 75.6592 11.8467 75.582 12.3252 74.293 cv
12.8584 74.4434 li
11.5859 78.9404 li
11.0449 78.79 li
cp
f
17.1484 60.668 mo
17.3701 60.2471 17.4004 59.6689 17.2754 59.0029 cv
16.1279 59.3076 13.7803 59.4951 12.6992 59.499 cv
12.7227 60.4873 13.0127 61.1123 13.8701 61.5186 cv
14.8242 61.9766 16.5879 61.8799 17.1484 60.668 cv
12.1553 58.1797 mo
12.2227 57.4727 11.6807 56.8926 11.1846 56.667 cv
10.7188 56.4414 10.0205 56.416 9.74121 56.9941 cv
9.56055 57.4023 9.66992 57.9092 10.3164 58.2061 cv
10.667 58.3906 11.3047 58.457 12.1553 58.1797 cv
19.875 55.333 mo
20.002 56.1816 19.9609 56.9619 19.6641 57.5547 cv
19.377 58.1602 18.8779 58.4805 17.873 58.8291 cv
18.126 59.7393 18.1602 60.6914 17.6816 61.7031 cv
16.8887 63.3877 15.2197 63.7314 13.96 63.1191 cv
12.7832 62.5566 12.2012 61.5186 12.1475 59.5674 cv
10.708 59.6836 10.2158 59.6455 9.77051 59.4346 cv
8.96777 59.0439 8.4707 58.1797 9.10742 56.8223 cv
9.65527 55.6602 10.5332 55.1182 11.5566 55.6143 cv
12.5469 56.0957 12.7334 57.0928 12.6992 58.0898 cv
14.1475 58.0039 15.5156 57.8789 16.8887 57.6748 cv
16.5879 56.8926 16.0078 56.0811 15.5801 55.8857 cv
15.2197 55.709 14.9639 55.8291 14.6523 56.3408 cv
14.1475 56.0898 li
15.4668 53.2725 li
16.0078 53.5137 li
15.6943 54.1602 15.7266 54.7471 16.3389 55.5244 cv
16.6484 55.9092 17.1104 56.6377 17.501 57.5244 cv
18.625 57.2773 18.9297 57.1377 19.1787 56.6201 cv
19.3701 56.2354 19.377 55.7305 19.3057 55.043 cv
19.875 55.333 li
cp
f
22.1523 51.3027 mo
22.8789 50.1191 22.8848 50.0352 22.6035 49.7754 cv
22.2578 49.4727 21.3789 48.8623 19.6563 47.668 cv
17.9668 46.46 17.0693 45.8477 16.6738 45.6289 cv
16.3389 45.4414 16.248 45.4824 15.3936 46.5615 cv
14.9189 46.2256 li
17.5996 42.4043 li
18.0615 42.7236 li
17.3486 43.9189 17.3359 44.0127 17.6104 44.2539 cv
17.8428 44.4453 18.4824 44.9258 19.0244 45.2979 cv
19.7422 45.8027 li
20.043 46.0195 20.1328 46.0195 20.3438 45.749 cv
22.3848 42.8447 li
22.5732 42.5439 22.5693 42.4902 22.2236 42.2559 cv
21.4795 41.7334 li
20.9707 41.3574 20.2959 40.9365 20.0361 40.7793 cv
19.7158 40.625 19.6367 40.6592 18.7646 41.7227 cv
18.3066 41.4023 li
20.9707 37.5811 li
21.4561 37.8926 li
20.7432 39.0762 20.7432 39.1709 21.001 39.4072 cv
21.3486 39.7295 22.2236 40.3389 23.957 41.5381 cv
25.6523 42.7412 26.5352 43.3555 26.9434 43.5791 cv
27.2764 43.7686 27.3555 43.7227 28.2178 42.6357 cv
28.6982 42.9668 li
26.0234 46.7979 li
25.5361 46.4668 li
26.252 45.2939 26.2773 45.1865 25.998 44.9561 cv
25.6934 44.7197 24.7988 44.0605 23.4951 43.1563 cv
23.1836 42.917 23.1104 42.9219 22.915 43.2119 cv
20.874 46.123 li
20.6738 46.4063 20.6934 46.4668 21.0313 46.6963 cv
22.3174 47.6143 23.2354 48.2285 23.5615 48.415 cv
23.8857 48.585 23.9785 48.5508 24.8555 47.4678 cv
25.2998 47.8096 li
22.6182 51.6338 li
22.1523 51.3027 li
cp
f
21.998 36.2998 mo
25.1387 32.8408 li
25.5596 33.2148 li
24.7051 34.3018 24.6787 34.3838 24.9111 34.6846 cv
25.2354 35.0156 26.0215 35.7461 28.5586 38.0234 cv
29.3623 38.749 30.8145 39.6279 32.2246 38.0986 cv
33.8076 36.3281 33.1416 35.3164 31.0859 33.4404 cv
29.4424 31.9561 28.6387 31.2471 28.2578 30.9658 cv
27.9658 30.7656 27.8818 30.7744 26.8291 31.8076 cv
26.4082 31.4063 li
29.0098 28.5439 li
29.4424 28.9014 li
28.585 29.9971 28.5586 30.0908 28.8037 30.3789 cv
29.1221 30.7061 29.9209 31.4316 32.0869 33.4063 cv
33.6611 34.8135 34.9316 36.3535 32.6279 38.8955 cv
31.2168 40.4678 29.3564 40.8398 27.4844 39.1514 cv
24.9844 36.9014 24.1865 36.1797 23.8066 35.918 cv
23.4951 35.6963 23.4268 35.7227 22.4229 36.6807 cv
21.998 36.2998 li
cp
f
35.3975 34.5381 mo
36.4609 33.5156 36.4697 33.4316 36.2744 33.1289 cv
36.0098 32.7295 35.3223 31.9063 33.9541 30.3447 cv
32.5811 28.7549 31.8867 27.9385 31.5322 27.627 cv
31.2549 27.3711 31.1797 27.3867 30.0137 28.2676 cv
29.6416 27.835 li
32.4004 25.4502 li
32.4688 25.5215 32.5898 25.6221 32.7188 25.7021 cv
39.1611 29.4248 li
39.1963 29.4014 li
36.375 22.0303 li
39.0781 19.71 li
39.458 20.1416 li
38.416 21.1641 38.3643 21.2588 38.5898 21.5615 cv
38.8496 21.9404 39.5479 22.752 40.9014 24.3467 cv
42.2793 25.9209 42.9775 26.748 43.3359 27.0596 cv
43.5938 27.3193 43.6729 27.3047 44.8574 26.4043 cv
45.2266 26.8428 li
41.6641 29.9111 li
41.2773 29.4814 li
42.29 28.4844 42.3135 28.3721 42.1045 28.123 cv
37.2217 22.4238 li
37.1875 22.458 li
40.1094 30.0332 li
40.1885 30.2549 40.2637 30.4932 40.3887 30.7061 cv
39.6172 31.376 li
39.5156 31.2773 39.3164 31.165 39.125 31.0498 cv
31.9922 26.9287 li
31.9531 26.9541 li
36.0439 31.6875 li
36.3301 32.0225 36.7744 32.4287 36.9297 32.5684 cv
37.2217 32.8086 37.2773 32.79 38.334 32.0225 cv
38.71 32.4375 li
35.7881 34.96 li
35.3975 34.5381 li
cp
f
48.5117 20.1416 mo
48.6104 20.0713 48.625 20.0146 48.5996 19.9766 cv
48.5693 19.9268 48.4316 19.8408 48.376 19.7813 cv
45.459 17.6514 li
46.1953 21.291 li
46.2295 21.3857 46.2363 21.4502 46.2705 21.502 cv
46.2969 21.5508 46.3867 21.5254 46.4365 21.4756 cv
48.5117 20.1416 li
cp
45.459 26.0479 mo
46.2969 25.4121 46.2705 25.0381 46.0303 23.835 cv
44.7715 17.665 li
44.5713 16.627 44.5088 16.3623 44.3584 15.8467 cv
44.9365 15.4902 li
45.2441 15.8037 45.8535 16.2764 46.2344 16.5322 cv
52.0459 20.5479 li
52.8174 21.0938 52.9824 21.1689 53.9258 20.5391 cv
54.2373 21.0205 li
50.3809 23.5342 li
50.0537 23.0361 li
51.1777 22.2627 51.1992 22.1074 50.9932 21.8193 cv
50.8662 21.5859 49.5449 20.6484 49.3926 20.5479 cv
49.3174 20.5264 49.2637 20.5264 49.1836 20.5586 cv
48.8965 20.7236 48.2949 21.0596 47.1514 21.8008 cv
46.4365 22.2539 46.4473 22.3486 46.4902 22.6572 cv
46.6875 23.5342 46.8682 24.2324 46.9668 24.3525 cv
47.1885 24.6982 47.3623 24.6982 48.4854 24.0586 cv
48.7969 24.5693 li
45.7637 26.5225 li
45.459 26.0479 li
cp
f
54.332 20.3262 mo
55.4639 19.6602 55.5176 19.5811 55.3672 19.2354 cv
55.2188 18.8037 54.7354 17.8369 53.8027 15.9609 cv
52.8877 14.0957 52.4023 13.1338 52.1357 12.7383 cv
51.9443 12.4229 51.8477 12.4229 50.6582 12.917 cv
50.4063 12.4053 li
52.9033 11.1719 li
53.043 11.2578 53.2686 11.3848 53.5195 11.5439 cv
60.0508 15.1982 li
60.0811 15.1943 li
59.1484 13.3145 li
58.2207 11.4492 57.7393 10.4863 57.4746 10.0889 cv
57.2939 9.76953 57.2021 9.76953 55.8398 10.3359 cv
55.584 9.8291 li
59.0088 8.12988 li
59.2598 8.63672 li
58.1299 9.19727 58.0703 9.3291 58.3574 10.0098 cv
58.6455 10.6475 58.9873 11.4258 59.3096 12.0742 cv
60.4824 14.4209 61.4648 16.3887 62.0469 17.3213 cv
61.1553 17.751 li
60.2012 17.0283 59.3994 16.5518 58.2979 15.9844 cv
53.249 13.1895 li
53.2227 13.2178 li
54.4414 15.6563 li
55.3672 17.5146 55.8545 18.4922 56.0996 18.8848 cv
56.3018 19.1943 56.3896 19.1943 57.9004 18.5537 cv
58.1514 19.0635 li
54.5762 20.834 li
54.332 20.3262 li
cp
f
68.4766 11.2451 mo
69.3643 12.6563 70.3828 13.4834 71.7598 13.0586 cv
73.1865 12.627 73.6416 11.5801 73.3945 10.7725 cv
73.1348 9.91504 72.3916 9.8291 71.375 9.79883 cv
70.2666 9.76953 li
67.7314 9.73438 67.2197 9.00195 66.9082 7.99414 cv
66.3975 6.32129 67.4307 4.78711 69.416 4.1748 cv
70.4023 3.85449 71.2959 3.75391 72.0371 3.70801 cv
72.0781 3.85449 72.1318 4.09082 72.2021 4.28418 cv
72.3975 4.89648 72.6123 5.50879 72.8789 6.12988 cv
72.2715 6.32129 li
71.5596 4.7959 70.6172 4.48145 69.3711 4.8623 cv
68.2666 5.21191 67.6387 6.17871 67.875 6.99316 cv
68.0557 7.56445 68.4639 7.86328 69.5215 7.91504 cv
71.8975 8.00488 li
73.4268 8.06543 74.1836 8.60254 74.5596 9.8291 cv
75.0986 11.5635 74.0068 13.0586 71.9102 13.7119 cv
70.9648 14.002 69.8652 13.916 68.9434 14.1904 cv
68.7236 13.5352 68.2666 12.377 67.9053 11.5635 cv
68.4766 11.2451 li
cp
f
75.9424 11.6357 mo
77.1455 11.292 77.1865 11.2324 77.1738 10.8779 cv
77.1348 10.4004 76.8857 9.35059 76.4775 7.30469 cv
76.0605 5.25977 75.833 4.20703 75.6826 3.76855 cv
75.5625 3.41211 75.4912 3.38867 74.2588 3.53906 cv
74.1465 2.99707 li
79.1094 1.95508 li
79.8574 1.79883 80.6152 1.55762 81.1201 1.36914 cv
81.2598 2.00879 81.7266 3.47461 81.8965 3.82422 cv
81.3564 4.01953 li
80.6152 2.39551 80.3086 2.28223 78.459 2.67285 cv
77.2666 2.91309 li
77.1133 2.95605 77.0361 3.04199 77.084 3.2334 cv
77.7148 6.22656 li
77.7451 6.41504 77.7881 6.45605 78.166 6.39648 cv
78.5596 6.32129 li
80.001 6.02832 80.0332 5.78418 79.9668 4.80664 cv
80.5449 4.69238 li
80.624 5.11816 80.6934 5.55371 80.8154 6.18164 cv
80.9463 6.72656 81.0859 7.30469 81.1699 7.66602 cv
80.5938 7.79883 li
80.3086 6.86621 80.0938 6.66699 79.0391 6.89648 cv
78.1318 7.0625 li
77.9727 7.11133 77.9063 7.18457 77.9473 7.36328 cv
78.6387 10.7227 li
78.6777 10.9014 78.7744 10.9619 78.9443 10.9189 cv
81.1914 10.4678 li
82.2695 10.2314 82.4697 9.90039 82.5576 8.97656 cv
82.6436 8.00488 li
83.3008 8.04004 li
83.3008 8.79785 83.3721 10.0811 83.4727 10.6523 cv
76.0605 12.2051 li
75.9424 11.6357 li
cp
f
87.1123 4.75684 mo
87.1406 5.00586 87.1855 5.05762 88.0576 4.97852 cv
90.1436 4.78711 90.4297 3.60352 90.3584 2.85156 cv
90.2344 1.73828 89.3086 1.07227 87.8281 1.20801 cv
86.8457 1.30176 86.7813 1.35352 86.8164 1.68457 cv
87.1123 4.75684 li
cp
84.4893 9.84473 mo
85.8428 9.62109 85.918 9.56055 85.918 9.18945 cv
85.9268 8.73828 85.8359 7.65332 85.6172 5.57715 cv
85.417 3.49805 85.3125 2.43652 85.2158 1.9707 cv
85.1318 1.60938 85.0605 1.57715 83.6709 1.61816 cv
83.6123 1.05762 li
88.8057 0.537109 li
89.8799 0.43457 90.4492 0.520508 91.042 0.84668 cv
91.6113 1.15137 91.998 1.70801 92.084 2.52051 cv
92.2754 4.48145 90.0879 5.04688 90.0879 5.16309 cv
90.0947 5.24902 90.1436 5.30859 90.3096 5.49805 cv
92.8145 8.15527 li
93.4287 8.82813 93.5967 8.94238 94.2686 8.88184 cv
94.3145 9.44434 li
92.0156 9.6748 li
88.5996 5.74121 li
88.4834 5.62012 88.3848 5.60938 87.7979 5.65039 cv
87.2715 5.71484 87.2158 5.73828 87.2217 5.87793 cv
87.4668 8.28711 87.5273 8.6709 87.5918 9.03223 cv
87.6729 9.39941 87.7529 9.43359 89.1406 9.37793 cv
89.1875 9.95996 li
84.543 10.4072 li
84.4893 9.84473 li
cp
f
92.5156 0.169922 mo
97.1328 0.0947266 li
97.1455 0.666016 li
96.5098 0.670898 li
95.8828 0.692383 95.7578 0.885742 95.7578 1.09766 cv
95.7725 1.37988 96.4648 3.12793 97.1758 4.92871 cv
98.2051 7.47266 li
99.2344 4.74219 li
99.8037 3.19238 100.484 1.37988 100.484 1.00586 cv
100.484 0.635742 100.27 0.625 99.0703 0.635742 cv
99.0518 0.0556641 li
102.691 0 li
102.71 0.576172 li
102.315 0.576172 li
101.698 0.601563 101.453 0.855469 100.833 2.4707 cv
98.7568 7.91504 98.5313 8.54199 98.3252 9.71582 cv
97.4375 9.71582 li
97.3066 8.78711 94.9375 3.36426 94.2393 1.91406 cv
93.6826 0.764648 93.5986 0.751953 92.5244 0.737305 cv
92.5156 0.169922 li
cp
f
102.994 9.01953 mo
104.455 9.03223 104.541 9.00195 104.611 8.6416 cv
104.691 8.18164 104.786 7.11133 104.942 5.03809 cv
105.119 2.95605 105.209 1.88477 105.189 1.40918 cv
105.179 1.05762 105.098 1.00098 103.643 0.77832 cv
103.703 0.206055 li
108.526 0.597656 li
108.466 1.16895 li
107.014 1.14746 106.921 1.17773 106.867 1.53809 cv
106.758 2.00879 106.668 3.06836 106.513 5.1582 cv
106.35 7.23828 106.251 8.31641 106.276 8.76172 cv
106.276 9.13965 106.367 9.18945 107.807 9.39941 cv
107.776 9.97559 li
102.942 9.59473 li
102.994 9.01953 li
cp
f
117.421 9.2793 mo
116.041 10.6182 114.793 11.2275 112.929 10.9424 cv
110.793 10.5879 108.726 8.74219 109.278 5.37988 cv
109.671 2.92188 111.604 0.737305 114.905 1.27637 cv
115.771 1.41797 116.89 1.80957 117.659 2.15918 cv
117.571 2.8916 117.552 4.13379 117.58 4.75684 cv
116.914 4.7959 li
116.699 3.14746 116.022 2.13184 114.508 1.88477 cv
112.829 1.60742 111.433 3.04199 111.024 5.59473 cv
110.591 8.29785 111.805 9.90918 113.36 10.1514 cv
114.784 10.373 115.951 9.83105 116.89 8.81738 cv
117.421 9.2793 li
cp
f
117.526 10.9189 mo
118.764 11.1631 118.832 11.1377 118.97 10.792 cv
119.124 10.3604 119.436 9.3291 119.962 7.30469 cv
120.517 5.2793 120.783 4.25586 120.864 3.78613 cv
120.914 3.41797 120.864 3.3623 119.666 2.94141 cv
119.82 2.37598 li
124.715 3.70801 li
125.46 3.91504 126.249 4.04395 126.794 4.10352 cv
126.64 4.74219 126.373 6.26465 126.352 6.64063 cv
125.782 6.58691 li
125.862 4.7959 125.641 4.5459 123.832 4.06055 cv
122.658 3.75391 li
122.489 3.70801 122.384 3.76855 122.339 3.94922 cv
121.541 6.91406 li
121.501 7.07324 121.505 7.16309 121.883 7.26172 cv
122.271 7.36328 li
123.671 7.74512 123.832 7.54297 124.199 6.64746 cv
124.783 6.81055 li
124.648 7.23828 124.504 7.625 124.348 8.27148 cv
124.199 8.79785 124.065 9.37988 123.986 9.76074 cv
123.392 9.61426 li
123.576 8.63672 123.475 8.35742 122.443 8.09961 cv
121.541 7.83301 li
121.399 7.79883 121.286 7.83301 121.234 8.02441 cv
120.343 11.3438 li
120.309 11.5156 120.343 11.5996 120.517 11.6494 cv
122.744 12.2461 li
123.795 12.5381 124.139 12.3018 124.638 11.5332 cv
125.14 10.7041 li
125.696 11.0518 li
125.354 11.7051 124.86 12.8994 124.681 13.4541 cv
117.36 11.4795 li
117.526 10.9189 li
cp
f
127.761 11.1738 mo
127.587 12.8281 127.893 14.1025 129.246 14.6182 cv
130.636 15.1484 131.633 14.5928 131.927 13.8018 cv
132.258 12.9678 131.712 12.4414 130.935 11.8037 cv
130.058 11.0986 li
128.088 9.51758 128.129 8.6416 128.5 7.64453 cv
129.13 6.00488 130.894 5.42285 132.831 6.15527 cv
133.798 6.49707 134.58 6.97168 135.171 7.36328 cv
135.126 7.53223 135.027 7.76465 134.954 7.93652 cv
134.727 8.54688 134.559 9.15918 134.354 9.80566 cv
133.751 9.59082 li
134.129 7.94531 133.57 7.12891 132.369 6.68652 cv
131.266 6.26465 130.174 6.62988 129.877 7.45313 cv
129.673 8.01367 129.821 8.49512 130.629 9.15918 cv
132.449 10.6865 li
133.613 11.6787 133.884 12.5557 133.431 13.7715 cv
132.791 15.4951 131.016 15.9951 128.964 15.2236 cv
128.038 14.8887 127.22 14.1152 126.321 13.791 cv
126.554 13.1289 126.904 11.9502 127.114 11.0732 cv
127.761 11.1738 li
cp
f
138.664 13.0586 mo
139.146 13.2793 139.328 13.8447 139.097 14.3213 cv
138.864 14.792 138.314 14.9873 137.848 14.7471 cv
137.373 14.5283 137.176 13.9805 137.421 13.5137 cv
137.614 13.0283 138.194 12.833 138.664 13.0586 cv
f
143.021 10.7637 mo
147.057 13.1074 li
146.756 13.5908 li
145.507 12.9941 145.451 12.9941 145.206 13.29 cv
144.932 13.6689 144.395 14.5967 142.656 17.5313 cv
142.139 18.4531 141.548 20.0713 143.367 21.1279 cv
145.394 22.3076 146.266 21.4717 147.673 19.0635 cv
148.79 17.1641 149.323 16.2207 149.529 15.8037 cv
149.658 15.4688 149.628 15.3828 148.401 14.5664 cv
148.691 14.0664 li
152.07 16.0469 li
151.768 16.5283 li
150.53 15.9199 150.446 15.9072 150.217 16.2119 cv
149.933 16.5879 149.392 17.501 147.909 20.0322 cv
146.848 21.8516 145.598 23.4053 142.656 21.6904 cv
140.821 20.627 140.08 18.8848 141.342 16.7129 cv
143.047 13.8057 143.582 12.8691 143.763 12.4375 cv
143.931 12.0957 143.868 12.0313 142.744 11.249 cv
143.021 10.7637 li
cp
f
150.326 22.5479 mo
149.703 24.0889 149.662 25.4053 150.801 26.2666 cv
152.02 27.1348 153.123 26.9033 153.628 26.2178 cv
154.165 25.5 153.774 24.8447 153.194 24.0156 cv
152.563 23.1152 li
151.098 21.0293 151.368 20.2217 152.02 19.3555 cv
153.048 17.957 154.906 17.8604 156.587 19.0957 cv
157.403 19.7139 158.037 20.3584 158.505 20.9131 cv
158.406 21.0508 158.245 21.2393 158.14 21.3857 cv
157.753 21.916 157.403 22.4619 157.044 23.0332 cv
156.531 22.6572 li
157.343 21.1748 157.031 20.2275 155.996 19.4805 cv
155.038 18.7842 153.895 18.8486 153.388 19.5254 cv
153.042 20.0146 153.042 20.5391 153.628 21.3857 cv
154.963 23.3604 li
155.824 24.6279 155.839 25.5557 155.076 26.5889 cv
154.011 28.0371 152.146 28.0635 150.387 26.7744 cv
149.578 26.168 149.014 25.2441 148.231 24.6729 cv
148.62 24.0889 149.297 23.0547 149.718 22.2539 cv
150.326 22.5479 li
cp
f
160.888 30.1338 mo
160.979 30.2227 161.027 30.2139 161.064 30.1982 cv
161.122 30.1338 161.174 29.9834 161.199 29.9219 cv
162.512 26.5547 li
159.203 28.1982 li
159.113 28.2432 159.042 28.2783 159.004 28.3125 cv
158.978 28.3643 158.993 28.4395 159.068 28.4844 cv
160.888 30.1338 li
cp
154.41 28.6836 mo
155.227 29.3389 155.583 29.2148 156.688 28.6836 cv
162.332 25.917 li
163.294 25.4248 163.535 25.3154 163.981 25.0381 cv
164.497 25.5146 li
164.261 25.8672 163.956 26.585 163.801 27.0342 cv
161.38 33.6836 li
161.054 34.5684 161.027 34.71 161.87 35.4814 cv
161.494 35.8916 li
158.084 32.8086 li
158.458 32.377 li
159.504 33.249 159.679 33.249 159.901 32.9805 cv
160.076 32.7813 160.658 31.2773 160.714 31.1094 cv
160.727 31.0195 160.707 30.9697 160.658 30.8994 cv
160.422 30.6436 159.93 30.1621 158.939 29.2559 cv
158.306 28.6836 158.234 28.6992 157.96 28.8389 cv
157.147 29.2314 156.522 29.6104 156.43 29.7129 cv
156.155 30.0186 156.202 30.1836 157.083 31.1309 cv
156.688 31.5479 li
154.015 29.1094 li
154.41 28.6836 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 13.0.0%%For: (Bonnie L. Down) ()%%Title: (DeptHealth&HumanServices_USA.eps)%%CreationDate: 4/8/11 4:41 PM%AI9_DataStream%Gb",Kl$?[TQ0oCN*klaU"9L?jjsm7$O[)<R"+cPU6A-nK5aEBmVE<u+:T`S]<VqtRP4%u6S0+Zb3:a-([;4BuC<c(\KDk*P=-##;%T'Thaf:*`JQAog*':6.aXmA/pnEZ!.cC]$aGo1Q-eF;GV6KtW<_s2"'O5u)(\D3]<]KU]4o_e"JdEV@;q=EbSf9b)JcemLtr9a,k%o?lfdrgVB]Qfj^%fDdigrq+19B9sFtO8CH2?ek;:hV:6ZcTaY/h<[;=rqcPnbOZh$0E"t!+/FmCkVl.ap9i</rK"[=s5rtD7IR5U%HJ/9TpV6n,i+X9!mj7^?iSJ/g>[G-hIX?-^H[VZ-]>*1To5Ci4F6!/@l92n1rp;./>OS7p5eXM-N\<$2O0<JnT&+A56cO_:lZ^\P%\G@JucN8T8Fa!T?nbJs'e$JYd4RD8'Mt.V_r9=%ED=>58PO!-OpuooYbgZOQApN$<s!u_#fA\^3k*:RC3qCZ[*Vo7H\,"91bH!aA%Vgi%Kj!X"c0)3=;Y-7gm^[/9PKDY<=fr<p.[;SZYR_lu6DbaYEhTDcUUK.?ap=0Urs7%lHT(>=[%ms[3kT>4u2#r,L*W?"OG5!B\%fl+_SnnT:03i#i%q0cR-1%jFMD=:fZs!oosRd8;FT0BkL]fkOa*gZ^XD*gnfp\7lqp''MX];>89e4n5;PA?E?Nidg1_o;G$^=i8X%fu;M/p%**5+s1*\aZe@h\c)0[s.%Q#b4M=!T=hZr^\Q^9`GM5#hAf62qrmnHq.4J[cQ6GbdaHH__LG42cVADMSDVad\pQfMs5p12%qQ&MfG^=E,\+:Ql2tV]_T:K>;G5XF^etoTB/j9[eoT/F4fDMMa\FH!!%t,\5i2;jh?E"J#!F6B3Ggn\:a#=f10!='d%6jLM-DEj(%p\gS>a(,#?BrpkAJ&0#`rR^P2%(1TXmHs_7%c-ra%R(g0/Bbql54.f%\pAaCrKJ(k+.!60I8=5CPAtmH7"/c5o5FKc0:p9En@ua7%m<*@'=02/,o3;2grT_elMuKdODm!G0qr$b/l^_,PKPqp&hL<)i^HB8Wr;>*)@e.j)4OMQ?M]^4JH['l,m+!3Fn$<te.o/&FJ,S4!%=[,*R-np,HoYnf:q;:Z)dkdGiS'CrWMs&u85.ePC[.18JA]%K7;/6.2`]G73"'6ROa\:T?P;_'B;a2B(cb60aIearZ0E5DIrS[>=%o&@d9l*G:]cL-%q4hnHbam]4cQh<.`F$?2YJ)YtXJSk4lVdEe<?9E]uG2n6<3k`);34h<QoP`&oc_(48hYQorYNfiU(d5IqN6([u%Bon(>?9R.mEI.6Ca1A-ZqW?f&EBbUoT#WZo5CH#Ff&kG":S43LE,WKSk*DY="5EVAo]l'\_mjh\jJVJ(:=%K:8MKHeIFSYa9_rpV%ItT0Fc2Q8cCTq)_;V,"549dKKYO:1uFXl:\GeEXgS[Wg'O,o?^&!%6]pQ,'/gMoA/a8%\8a5_.*O59>HFF81PFEhnH["#H,e;ifk%3QakV-m"'eJ)lWU_rJY0_o'BE_u7Kd_ff.+%a/9E9S`-l*;W$H\/ZJ1*$$"?*$";ellEHcH;G+B5rsf,iP6PFK4Y(-s(MFOs'U>+%IrE*hfDW"IpX=TH&,Uh5m4UPJa*U='LO08Qqg3[:D6NAm]tB^*ia1:/HZ!b9a6ffG[Y)$Gp0)7>Q'PWhZ%_>0CJ-gn8+j)-eGZs[%>HKupe6Gq32,rHnkG9/bUN0HHb'r"oXjg6@/ucc%MD)+`q)BJX_gIR?o3Q=Fk)sd\3TcEOG'Vb4a6=umVLu7Jp/4O@Q'>3>0nn\P%91qC-8+A8S`;R1^>HG*J*)heN6m#]>_JqOBLZ'BBLV;&$h$KqLpaO/,"o.#mifF&#5P,20hs^C'X"Q[6jJ*7BHfl2hm#Kkp4)k(7%cS\d0(B[oT,@#3E3Oe?+I3Frk(<c^*-Z&&)]]>n"D!?@$Y-TJDmOXh4?gZbC4[H_LlKlL,8AENdRZRL24&5cd^U8RchsDN>DT7.;%J"qJ@Ilb8JDq)B91RS2lU]1:QHLF?%Z&SPQ2XsF!l9@Xkq)70gnF`etb0DNP]=L%OHN&0L?gZn+gNh3H$jl.lJ*[.0YlF2uL]2AD%"iAM+s0QS`GP(X%m-Ma2q1jAN]0'Fk%Z$frT'ks"[Y0DrF_P7!-X3g)f_RE;]^"Q(Y]Y!*_u"Z`U<N@U]?PI,U,Z%HbhY$ZWO!(i%LJ-MupPk.n3SF4_Ih<dr:#i(`CV@hg^e5+<He7"&ka/)Q;Q0'0XAD,KRfe(EX7jg:8E_I2mgEX.9.\d#*@g<*^>n'IS_7uZ3Rf4^%gmS\]p<Qca=gE5!En68!59pXada`$W^)!UKmVVjKdLJme-usG+EPX;:F70AEA8&\1BKoVJl^e/a4D$!@m\GK<<,:6b8d0?s#[DI(%$1;_3fVbff0pC>bh@X./q-bXig-p!VB<B'/@[=(h\rV8cf\04+cEb_9>C6`jRX'@0I-<U_d;J&o$JPuSdUDCk4fg4^HQ,b6CCg;)%BG[4!nr@[C2P2U,9!1e$"EspGE2SG(S$Ge-C86CsFL6=-Z#:_83rqhVr@`",ZGXj"l0AJ*#(kJ("]N4K;o)pKFomORqo%DU?K]<#%kmeP18Z?^a51p<eJ*]<HQl#(]Q(f:pLG9SRX;&%$$arr:F9H=Sd_<Xs46Z-=U=0S-GUL&9/H%sbQ5AD89C(cMg%!BL"U$Ig].SE5%D/7DKFU_GoMdiC;C\iFT\^kYb<90G?bo-"NY%/MNQS;LtG7#Q8oPN5Cc?[W*gNGo@'1iEE*Ro[B[F%8f#t>/Je.F5@>Cc-4"]Ga3%,c0`>G'FS2Km(:h_DO<NrDrlQhF5F>nj`u<k?L)f^7aBSE/E4hMf*Ft[1n[g3V;%"e$\STA9?09#]r=%670A&1n_`dLehBJV&42(%Y1_h2Lc&D&;R*_D;raZP\+KL;f$M^_dT><A\*3Wi*l`flM&#JeMRe^AYrV]@TP.ssm[aPX:KRElaYlXU#EABG3$'gDq=70+IEar`%cq1E6gY&u#BK[g-oIa>Tg'51\@XT,b'mSLB_%e-Y@G:8qaguZ"3IChq>nG<\KqJUSl/)!-e*LTM`:J0VpQ1b%*8A?:*U)&YL#e6;%F>*8r(L(3i&7+a)2I,,X;8+RoKaA4%#5p</m:H\kBFKG],PWJdUjGPHIV!0trR@'>UQt-iG&j+3a3\<4qi:'F0RBk4],A%'UMH?s%-8#1r65M)np.1asH+QSShj"$'#M]u7DRnZSj:!O2'UkP?Ip#KE>6=[sF:#FNMu$uf0,5MS?,ZohI>^.JT3ULAQY!bD64uUb_K>9W%E]UFfkj$-O03-`S6=L@'=J`T&S4i:O]0'GK+3h+RWbQ0PH4.P-XTsD[BRi5&O,Z?\VMgEQFKkFtDmskj1:&Q,r*-GTe7q3#@'ih,%b9ej"l]bFn@XL^*&RkW:$?gHmbYSo,$$aEaC:*(`Q91--nfPK6_I2bZii6Bq,L9G;!ObIT7G.#<G<m`Sqhr8hYmY_KB-aO0W?9sh%NaXnJOPeRV/+'f%1'u,@qYX2,6n(8IANto@6/Nt_SM-gG%.du?[f&1V.,4u!^n]d`RdkGR.bL^B[N)QVka*R4BmP9)f/e5[buk:B%?t"]]Zc?oEoe<PW1AMO/j6Xc:>R/.qg90BrQc1&OREGM(kVY$=JZpfH3WQ,\F"[$Im6qd&ej<C*[5`P#LJ+te&;moUIIgn\I8d?l%EpSH3N*?PcT#9()^eSuZc,^g4f!Ys(LI.e/>:."aZV0?%qME5s=o.(j0IAfWrK%Tb-X`:bX+5WM<U7GSBWupgJYac^gAp?&&/_:p%FV-92Jo)%-`2sXDX#uWB*I'M(i9Nnk:4-p9qWr;4I/Cu.+XN#k!o4Lk2W^k]nSI6U/N%g4_$?KQ,q9$E??BYII#_,uko`bW@;F.=%"nAj+()E5ON!08YB;A)Pe@%!)XfjiE$f-mO0j,;b<EcZ(#nm>T%24r+[dDM9:,hW\"_.a-4&J%prJWc8=J:58J<Oq&"-#;h\C@B[%^sd.VVu%Y@OP1V;f"13jr-aJ/p$8o.M.g%U*a=6PK(Y-sf!`P(k*2<R9<TpMR["@Ri!UEAP7\@gWB)QGlb4L%dQ)-076/NA8SuPW%irX9=rEe`YOj6R3ncUM77P1!CU4UfZk:gA]e1>Y![=3s3LH4i-?sa[s_LgtBZj6Cbj3+!2]O3Ou&p]B^LX@;$7%51VkO,0J,1"nC%@1b5q.<d2$/(;q6laK4q0JD:i,PJ-483HURM!V5WrnM>`Wj;F@c3\TCO/RR]@UCZTA9.g=J0AL.fsT/6EG0BK44pGV@RuED&QFnq%5dS</QDp$0Khpe\pd@-.\pu`t;]oJ7'Q>mc.2.fBRZ,%j$c*FQKBWe0n9q^eA62!PndJ+qrLR_P-N4(d-.k4UE&%/JMQA'D&3Gc_%\Yt%,5NkK`eHoT7Fc[!\3h9W9g4:VgJSmF.-(ClUW.P5]Yn7?JC>9V"k-i1cBR=N+L'4XcVn'-<g2h)LW0*%4K4ENC/njJ7nk=C0%V,@)XR=s<oB'KeE+!eS%5VVD@XgkD-2#G*QRsp=.0Xt<4WG'?/Ua,;0_2.EcmoZ.;>`=0Pp!LT<.8ZJS2P$mEVXA2r59X.Tj'\NO%!`3SfMT/Y#7U't=h]-4>l.P$\bX7(VoK+u8?+*$&-r:3#S"1lkfQmU)n^AI-=@%<NdR$J0^6<t!g\bI_G.D.7#,XgdiM>2LjFXqJ%/Y:+\=5a>dVFcqd7FVGh9Zi9&3[B;-A7*pdM'U\+Mbr0PU33H=RC9!%D'IiU12.7k_V0)D1M?3fV.eUWP7Q>WOnjlKdSH$G`e<+j%+`[fMYXm9tf\\6KnCW$!@*>UnQFKUt,>7CODkGhm8WHfK-OL)W^?5F6/AUujNbN)="Y@J(O3MIT*U_-."Le^?5Tl=fL8<Vcp]d0C%#X_UWI"?O9!l<&:>TF;$A?d*tr?aQr3Y/5*mT?JkMGtV3l$:_)*U**c+j]pid?"s-!g\GJ=ol6#MjD:Y8dG=#8.a<UOe!;?Y`."2%eff:MbI(8oSo+VA2&<8\E"c$dnh5P%9f+b,'>!>\,cDJW48EJ.[.=)A$F<'.Cd!D<K?,`gmThC2U:A(?@:@,NQmK`-qfMY6jM.a<%IVNi58*TD7+IYP+5sAkY?3j;nTN%@IgL)NB<V/G#mr)/t=^2/f,<kHC@(QPEFAT2m7_;jPhiWB#nM8>GBs5>U'&gIkNdqO1^Y<J`%pA"M<<^3i@n`]9.b*)OD%?/J[f><ojasN^G0%fn[YsE>:pgai?)C.YrOrj&/`oC.TB#W/pmrZ.ISgqq@q#P/E]j+!sgWe:$eH4%!%/@Z\p*NWp*$OQ+pC?XeAV`$L3>Ar/>[YY6eL:-LCXbK&:6^L>#O7UP1(BU'6lVYrkVI)`\GA8Y&,Bkh&V-2i,2\,meH+"bCC\-'f%R^UuMD>j9/gG)]Aqnp]o<c&9:r7boR/C_Me^AW!;<cq(t]u?lILUV*aQhQ6%ld!lOo@16D5E/CiNWGcR@GfC9.D.\6q7F^me?%U,%*,k\<MVfrOg/9`[FF3?%=,XG<o`!RTcph4)%[/<q08A=20qjT3/:-S'\1(QPWY_%*V2k4qS^[`^lhi&7^YH3jOBkjG3F]TT<4W'f%[9C/_9B\]WkJTN\c?</WTGJgb[jCaU?X_AM+E"*0Sakr,%X6(u:Usg?M'l4JNrsj>cN_d'IZIT43_3Ga9OR&0RBsS>MJ0oS<;-@8%j@UD+WB1]W#u+ssbrShTGOguAmZ4b#r44BL6nE_EqDOJT3`q&^jp>>Gi6]:k66n4?,Pqq$60*n5p8sk^:&a77Hirs]!jdT:^R"e/%'P,)tO/^Kt@5*#dYB[nk$)]O0VmC^4ZTcuT\?hrdDr@hAC6mugaM\O6*A-gQ)ZeWnftfje0<a*$JHL>5Zi<`@04$P4rrAAL3Z(8_%b1e-53HDd>Kl5F39fiI*+`3[(S*==>SU`7cL0@3tGP1.4X@m1&:Xa0fOT(k<)sWu4rUJ.[5HU'&V5DNXZZ-(g_gHZ`ZYE7CD5+IQ%O`-Qg(HYFRB[OET_=g#PEI%sJ9o8%/-980u-hjbN0rDUM;A7SHLHA@UY38Q`9nGSt[T=j+[IO.kj8FUf9MXd#RiLi[qlqd%2@4Nn%@%YLggUkWDX?#QQ'gtQ7TG0nOeN%DR;XU$A+7A#mKoN3T'\*/68S79ulq=$+Rftl5N^=oZO(Y[)-mGs>[%D0K"+.M!/==:r=qfZM%[B1+K#bQhM?*s!2nk=qfJ@;8O:/-anVThS<'sWq<d*Lndr"2L7=[IL<h!'u-(F?C!.T45!?eG0>Eg"L%=Abk/O]I*um@5!@4-H&,%o:+N$nY/dhGJ8NJMt[#`+4j:q>*tEq,F#j2LEUsMrX*"r2J!=3Jc5<839RAi3TDbFU9F$tWBWi"(\Of8M"`ZSnWu?.*LU`"*HhsA%QJ#]o,OtRS4WMSM4=iCPomK?q)kEHB&+MJ%njBqUZX,u4$A-WNQP?13?Vb*DA7O^%V580m9*LS(.T'RDnH\o<?Wd9P&mWqk0/5A1%^@cn(>GGQd/BmW]mZYQeP'GdW''^R"XjJF:1-s>ZS_0J-A\R&1Z7;E*'llR$3FOcH+4*P3]DJQl^+\-:,LH?Y3l%<O@VXOr^bB-8%BZp-jVZAt1l097[(bV1tY^2PfWr!c7St(]Kbf,sF@3N&)R4^$PNU]M<P/00reG@4YBNdKr6<FK!R)aJefZ%9t/XaAq5cN3Lpt59n%huc;R(/8TMqcK$<6?JUkXO;lXrfkTGF77<am<Wd@mco]D4.djA0)++%B!G"m2=Ljk/95,'45!tUe-eN%TgJL4&;_*48U5',3g"3L%*/)Ji9PGc?-/G8GIEY=NT>3j]kIZj+Qu<.kiX3"toEI3,Q0N'QZ1$?RP&A]CA`R0j=#k@6am^r;H!oa,r)@>/S8LDD":<hHAE3D[%W6:oO7rH8\-iL>!f64&pZ"DgddIFa^(jio>k2jJFVqlQb?OdBX[(]KdZ!W;nVD1/@IJPBc65B<^PgPZERKs:R49q8.QC7Ee77L%1%U[i>10k-;jg\/VZ/a;t<Q(*lL-u'nh%Ae`VgYOmGp8Nj/O\$WtIXK`.eHm`63Nju2^4=l+ch.bS<=W0(qM^&.SX`/Ipi^]RV:%2+%a1f5JUET9-1D8dK_cr6t]D(_hp(M#/M!b!9LEc1uc6\RURV0.Z\0@H$-bb0MaF<'c7*mkp,:+-X0BoEMeSWc"\<H$MoKt\'h-tM9%VmhqP1sQ!91.`nmCbAjcA6(c%__*UD($Yq.hg1])A!l]).L,i8fKMW"2_)pUpp)&k<YnF$UaP[rA=0L>Z4P5bENcW9V^p`FVi]Yf%7BWM!_=RqP#EfIU/U.Y8L+FfeHJqjIN&:Q7g<pHE6&<T_P"UEQSg`K]aHS$tG>YR4IO?[H,=Z!O2EL#SKQW$([s4Nsi15n.dSIL_%+c+jV%tJc4_OQr@N)5k>qA/h2[U""8]8@DP+mtISk\%hXYtj4FmPiR[rBt1;`$2n#$'@^(#qsUeTDm,YYlr!^9+VT!G[2\Y-gpn*%4o:cP9<o4tR[_H5--G7YA9Phqhq>>KElIh`h4d<,]s3iHQM0Rd\&"UeoB"9@[b&23na<9>]mOINo3T/o1u*Fo??X9T4c]7Xh"rGb%AWqK012JVrO"B[hD=G*EXc'58ej\__U`1WHXKl`R)'C_tD6^(9ggQalVLW\uFc\c#R3f^=GkYruq)*9gb(?R?pNjIG,(.M/H1(o`%mo=c8[=.KYIm5aY'#rm:-KAEUjM%\RA_5#:(XCj[l/8E4f_m`MEL=CO,I(l]HB$ni`i#T;?_9k9?FG62'sZ5#qC4CVn,ZD&SiU9:%/Da[8.O0Fu*,MY^s&BED&P;RiWsnY2-C;o0\_:4Ts#6%RXmArMVsYc,eCDhtTd7iM*Z)ufcm;4_lLZ.pras`;Q>:4.C,W;R<7cd/%d+]K]D$!:R>n8C3:JeG-fF,g<#F#D0AWrJEY_le9K,h^,==+"r,`?+oR$,^24ma/YQK1tD'om/]3eC*He/7VdTUni^l\`\VFJ&cb%Xq3:Pj<sFj46X'>DVLUc\C2t_]4;%dg-Bd\La"T!$j8(V6IN<PW(DGClsg>a;lp[f.';5:^Dp5#;ooff"s]T]cZZbE:<f7d`=rk0%<:+-0Oa_iE?s3DNgX;L/YBmRm-7/pYMjsrElIa!.`tgBL=caGb@FG`pm>cXq0&h[_@9@*YF^'a8>B_")$.1H.!%*'"%,t(%>r"PW%E%*!&#>lLN'6_gh"^\4-l:>^BU]V.h,V<tKD.%"VU$al%\n+)ClnlsheXL@V8M2XC'RbM,Bu`$o&t/FVo2#f/ak5pZ)T*')qKEh!%04;/%iTlW[[K8=h'4(Yj1&X\q5E?giaCiQ8!%+Od.%h'0!\CR,Yh>3)"rM,5XY<X[Mipdh@0O_J^u&jo1GdrB_%J=5*hV@5A;n;8%PdX"hZrtYF5T:@b828'dlZY\E[aXAkO?5]:2T,RqHaB%MfAb3o&L;LkcZb0f0iQJ<&]"c!gJ2Ng?mg^^L-$CYnT5RD\^[^\BOUgd%MDHY$"EBl;[gaZr:NJ4B/mo&]Ykn>*8DYWo6=!pICbB3D(LD4!DD2L:n3PWW#]2MG)VtLCk7t(N!AC2ERpY<sE$1euF6!=t"(aLE%D>Do6R8'CUSj?iORW5]"487Q_XoZ.IMPbu2#2*bS;QKj7V8B'$:m8[sn7LudL2>He1p)C9i$2Y8ZCM[-<Z_[<'T$m5qK:&L94*!!%WMI#Kb[1B5;j3fU_;(?n:A?=*+NtB1(oE4%"Z&4fi6oQdj)#UZX)qGN@K])1n$L=p?Ynh/S:X=E$a2V<%QI^J@F`Nkk;F(cal4cD%"5,&UkU7eHmp(eZ@GR)'84chVM]C"Kl`<AOApYNeU96ZgG*,_*GKRDc3$U("5YN<h]QMu9[A5iup@('up5f>gJe3FsL7p0l7\.K_%qugnenC6$G'-[+l8mg7B.Wa$raM',E/AcE]/5@r/WXYW"5G<ZmV?oWqX976q/+s;W1.l6g.N.L["1-&q!ic-Zc@ZIi/$P,Y3?D83%OpbL<laA[OT/BCdG]s=r?<s#TDG*_mL"dp`JQdVq_DYY*/(c9Q9ku'?Da$u,)a66Q-TX?fQF6rJU<@)&?_K.e8ESVplnrQ<k(rD1%,>/ID-_!M]g2I%K'?99ORC,Pl7DaZ&A]H&#<W=q/MqDS0\H<%;6>&T?A7(j+S"7m@ncDD)A7i9rNI9%`&M+)5%%FbA^r$r/_8"_D%^.p$qSQ638PSG#5!^IuMMcc":[S^_Epd/daIB(<QB/jCF;L"Z**-fl]$-74I`^'q84RU-NJ7r-1GSROd%#.[J@'&Cok7)%2cuu>"%Zh3o"gPt%G&%$u'.Ff6QgQr6rX"#6o_'fLlqg=*]E0::BbY!PWm?XpVS:4Ij2A+OXB(;9/bQA5`rP>puN5TTQMh2LPWemMl/.3:J%3q^(VVrPCF1S5('Uo'dund3YKLtk<q>B1T?>1%rmKBe7V5[=/eVHUI"_4Z6?'<#16FpCU_g'W_+R+<%q[2E4SR7<:BU4m^,!pVqE%/jFr!1%m&Na&?B.C=P(s[g7,UA>50cZ0F5Uf6;MSL^Q,%$CWjC-V;a#(;&W[Z`Zq7>,s`:"lE4U*C96fb.8Y\DRq@t'f"tf1$RL/%=,miWn2>2jZMSsr[\Z9WB4!]&,b\#e_bdDdR49,E.#b'iC`gIC_+s.PkHie]5nk5P(3TYVaXBC<?JM8RjE4-0(rSiWZ6Wg:S2Me4%E`!XQPVZiQ%c1*=LZ**hJN6D2`M-.VG"*.0<**QXKP1Oihc:C*U1>^BR]+B7OK>6Y#PK$C-FBs$HQpY?H55qm`)s;=ISgoLga^fA%Wn#@ap7gCI*R<=FFrkrZmt;5?Z>Q`<=QU+uLj;uHoX_0m2WE@\BtFgd'9H6KKQQK:nAZZ76!OD%F[273+EUFCN1ODd'Cl+n=W(9=%297$D*<8!W!deEVeM?4JTtAt*+d+k*D%:\4eK.>a9D.Qe7H(/%AN_l7kp6C)%EmLO'K:S&2B6qFDVOnU2=I)HC.*SLSCZ*(J2o\&%5bTABbf+mF%J7Y1=;1PIX[;NO7/uMS'6b)[dIbh)JY_4Zr47X5MFX<m8fZe7H"R<le8i`-HqIb::$i:B`K$H4X3pKOVn<e([^g3%%3k;7h%\jF]Z<C.dU\JY<:[Hs=9fqKkUeGWX7"G\lTQ^,;$t:-+IVQY0@b+pEV4C8;1;4?LNni.Ke>=G$[&gOY1::l_>(Ncj[/hZq%2*V:p<\?.58OMcg?J%(XA3"-,4ks:WdO61A<GP$["N64WDhYRn#rDg^S>`tMh)e=9J4k1ian@].3!Tl_'qnj)*>]'ug2KXTSi:#j%KIQ9S0Abe+\LbDuJ;E@B($5=?$ap0m7JQPEQG+*E'qKS,lAgol$Mm&`(_3%OZ7+IC.W.:g&R\HNXcm0(&3AAX6=.-lNeSdnFMA"E%0iH='lIfebcIiKu'Xg<Tl2tA??o"@S"?M+0B@#V\"^LmC4?`ipT/;Z6%a&()eLNRo/>9p\Y@kOi)/Jqn.X+0^]!IrEQsDTR/4IKl%]!NDunsu\/_elHlB30;*;3tU#OF.&,D#M`<"1/YrrdSf)i#Pon+#[P!4>:_>!CtD512HQ@2c2";UCY$MK4ep-<b>rY98["VTXfYD%E5=\28lOa%%odh@jXcL:/t2c;4o`ST<McMuCrju3Jg\BpPe^bt+W4?_L:3Mf=^hr7TF1^u/\)XS%rgtp[8aS"eQP3E5J`8`IT:Ee%#aZ>_CdU>,$o4A3.o+>#=lJ2,`/@hhJ7UQi!C59L@c8&+[oH-=JL&Yo-jBbX]cZ$RNd@h4>Gd?[*R]doDB;ORS4@1A=G7_^hJ1f!%W$*@]R^YNh'?)=mE0.lm?.#J&(!8F&!CQR'!hkMGWRe2[&Ji*\M9*V&-H[kK=MR5&_%s5iB[2,YfEYDZ;[c,reU]C=F-g=/",P:b%fU?s;+pk.MjAZTJ#9o%*dL?d;LA1sQ(&N9TUrW"[,&X>OE!::##/nO_o6he?;P9=s+_(LH$n;63J?kEHeWrN*,@8C#DAZ?t%mX@'%i4%H1B\5m&V&Ga.liTq1/-95M"tK,aij9"YBpEh:jXR!l<=g1L/@]TP<0:IbU]sLR:6eT^DLKC5D/bEA/S:"[(u'o:qugL>aX7'l%AEJl\_-5+U0jq<`<c)$Zo4_+^dPf<Gp+g=9:b6;G[T-SjW7.'f(.d:[i)*Q0r"-k#TV#1b83c6kc_>i8Yd<%'1^3/l3fS<Of)aH2%31/'dFY4SnTg8u..p/>Z,8A'^kgurkC>1#AW!iZQF+AP!:a\4oi4\c_<a`4dWG7^<]dtY/F2/,X&pBdt)Nj/12N@S?bmmWD$)!bY%Vts^S>d7_AZCPoT)5P_OYsg2VNIu:KKkI,1;RLLd3.uK'LG.8LJJI)E@n+j&?OZftHE/G.1pTcWM'UAGUe\-gj<\i";3fMM9l6l6%eZ!DWPSe0I(U2&O;d3-$'IXil?D#"_C0'S,^eG)nE]at@7,J>(RC")G=)>dpC\I4ag($Jt'8nFZVPGGM-"_4u;g1Z^UN1r)D_Id;%+?RXf)ZtaFgrVRFg61E#/^[:U1Mh^('39'NZ)hn@Qj/hl`(t/"3aI9U$Mojmg/8\L[V,*\$Lif7;I,YTj.dT1E)Tu3=mB!?KGDQ7%F152$6K%K6V&7&foQ3AtZN@gW`"`^"8!U`rJuP/s*-^`p%[.g3W*J.nS&g"Q:R<LY%&?=P@JJjk=;!qUfOPJu-J.#W3B[^1)"<,G%8<O`[CtZq_9D'58%$,08d*sgAQ5ia<WfP$tM:qXC$I<Za.Z]s5:<\/:OB8dP9*(KmE:J(OXWs0IClH?K/ZDXe9bK:q7"&Zei-ME-%(OhgVi/"M:6!'<7:jn=ZZ8%,-7(i>86F2?n&mQ`)QG=Ke(.>$VnSs(=?qZ/2(N!mQ)>oN[PA'P?6D`5^G+d/34d%'OE0G7XG>BPJ%\d$*H!hf?\<*Y\egDZ!YAS(NQXC=[b#Cq^Xj:F@(rnf!$J^!"S!`cX>9j5`'+m\WhlFGl$13/(8O(g4b/-`V)#NWdUK*OB*0nqsT%9K5:/?W;ZdA,-N7=AcPd,ftBu]&[$ik*El+3iNh:Z")E+lsh[*'hnhTqQaMk^!,`1gB?L?MK*?7D6pL&;1t!I0Z>fMYQ;Z6P?AZ"%`<iU,mTfoG%Y`)7EnFFe'QC(pbsC#MTP'[:%=7(3Z:X95/5:3?"Ecr"]\t1R;hCU[_72cOGR(JkMU3\Qih_:/AG+4qd'ruEGQ2_3%j>`Zk&-"(KABMY4_G:q'!/F9*9g(VsP:bFF-ca>0-SL%QP<4%KeB6#U/t9,/"=B-K#Va8&fJ-TjA[>(6LuNjlCNR<=)nK9^cK7c$%FJVu._;1I$DBm2LQ]&;4P[7N?-:ogN0uSo^?B@EJg'VIh=qRAP#2/&0J30^hKI3o-UeoeGrJ"SDe5.BDBT.l1X6OYnPSPt6/]pG=%PsQjWU7,?)/Cpb'EsaE1++!eCXLTbcm\;B"fi]_o8Ccs!&t;I#&4)"8#?C>hIT8E8_PJmdAig&OQ@_AAk$htT>"8gsfE)GM^1`rc%m@XN6.[Sp#<)#gW*Q9gfR];C'P<R\G/4-ip%RHigB`O(_eq)[N<U&1n_Q#>e)-81rMF:8eH^*"f"D6V,)!$)<dP'#GX92u*Y&r$D%aWrQtC6QGfJW12`;EI4R9G-uJWR*7/\B+WR&D8k!<n*V,_BSXTU+u*>"q1jja3l<r=3f?fkD])FAK@Ag9qG.LhiL.LlmEq?Y.4Y[%qMPhU'h9+`T%]VO:BEjq-u<%.<(X5ZFASM[!==+c16f\T"INr:G2X"G:e1EoAWU2\Ncn[/P\jHQNG,uc["Eg-2QW??5X<S55\DVU%Qfg2S9KuY>PSlBsd"p8Gq#2+Q]O#aLP]\ocbSfSh@k`[g;so9\S(DSBDM'2`*KqgX0G;IF=$^8BBE/h+`G)'O'T3Vn-m_/dYeX#Y%30[Q*Ng3<5?D7p3Le\nb/LCEf%3N%"f4r82"^t!g0Pb<3[-Eq6_3,SX\?`IEeq,\iL+J4C%j3]tSqUZ#X#>[8I0X6`m:ZqKOrLPQ%*Nlth./qVJ3ut7o!Z#3d^dF?]UG`.nad*q?J]K0uEbd=WRVh;>e,*Uj<4jJ1iojESJ#0!%J;r:H!8\]aO$LK5VA)_*JPBVJfJgn+%o?=JBa@$85>K=2i##um#>n5oXkPZT/?$]LP#es&T;G)<jW+m7M<%&VHjd:r0D.Rd8o'Wg<7UpnGL4RZcNeMN*dj=5&is@&%l2\"c%cBfZq!l0ArL(2kmb'5s(38VG9l7'oaSJS,NPl3t>UbO4\^e<bk4W56P:A01-(QK+&;VMrlLEpC:nl-;Jg4l_eWMYXn`i+72X2S;T%[HCP01>P-C^-UFh(*0b.i67BNDjNiY2(&TH!Kg&=B1pfW"^$XEnb*fM0D[:.ipkc%83X^E9VbKG+QH&2JPiOU#<?4[/=62>pa#dU%\A-Akljb:i1hB,?FV9VO4qJG2UQipZYakAjN+9,k;X2kBbMp81g">9"*r0XO;sG/P*HYF3J^NQ,5Q\6:8*PY$D%T.19T:'2T+NHm%M_!(V^;*g-Va_LflG/#cj4I,kJ<C2kXes&o(hTs5Ja(V7[`-fk*S*=)m%.YS47p^R6J2];Vm3S=);?3='Y]GpRbk*LmL`\sRKb+3%k16Ph=WtUBhh17<JT2sF"O)i$JP[2q?1%-2k4iN"5f_S8`47UmUhtb15'O42oX,O'PBARf32_Nr;-:5ab)Qe*((![/JD"GSfcL[Z%ErDa*dPN['9*]4dUGp^1s4QV9Fc[X-6rMlndW5Vj+<*7_3P?1UJQ/l;dSSLH[mY<\1n?o#157*!9!C9ch??FXd,D^53X&o4_]iNP%$l8ep5f!Vkn#@+c"AV_JBbn)s;f$^]WJ<R5"J"LP!U$>t)Vmga6hJ$`mL$2J*DH"+mj07i.(F)dQ_Lo<`[0XLK8+XXkeOrW\7B\X%1rttJM3"<9,q0.OS?GXOTbQfX<GN748r6k;5VBAf+D847R0@XEe<NW1VUka^.JL2$r,emhL(f^p[#5VdmGXZHQT5E82e%aPfaoNs%LE0s&K4rIt6:ShRbc`Qj(2!Y8JQ:TQbWqUL9TC)W;4&jfkcc%Qi06Sa/0Tk$e]E]R091.D9k;0YQ%8*d<Z+NZdBJ1ZYtMoB-><M2%MhJsq-)QNBCY%mE9L"c[:DOrZ)JasQH[J9fb)0,(iWN#fC>*oe2%kIJQ27J4KWj!,,gq6\2Ih^J))nfK[Kj.L8l+Lk)h4H4]0utT%K-8W,eRcjcc:U8eeX_pR,F3Tj"C1T;jM?ZcRd,9\"ABuS=&*=c%Vc?iWX:h0&<4Mc:gXg9WcNdB?S<*reFbS]M+T!7^;/.A;:`:O%$e2VnWYc!mdD!'=d6VR5L[I$E3`PkWnE(Fc$>$?j';mo`3iFA=C$NZCc39q^=Z)\E7G4p4`"d@UTnM,H6R"F?P)5DAnM6MO8t;aW%29?K\$bV#XYfnEO@dKVV3PlbZU?5M+k8UQ<c*Bj4[tCSM+:)N&X"FGZ3l)\+NiGi_Oi#A[9Y1I=%@^['3-`i=gLi;).0;@.7fC(9%$u!cY,gZQ)rR&.^g(Z$W/@?XE3S,J,Kc.@Q4RXRJ^4*3N6Rk<dE2-qQQ\o<W9"=)ZZffm*3QVSiD"[kfF<3#OOun@eW5G.fI8H=F%KfKa'?<$K$j?OE`@o[Ljl'?j;J00nk[=FKJ#dQH>?+f\cb`)ss<7oa^CXPL*kMIuo@\)FQlW$dsPDSVs77hI)cYWh+']WW[`=gW6%:f/79.8!o\0c:r=UV189'3NS+"Q3(dfZP+_ZV@W[1m>na,SS$$F;QMUKL#iS_4HA/,8,D`JuEdHZabO$jUb/N+Ifh]Z%>#?b3t/E%-RiBA+>as=m&K7l0>WZS63hJ&9;[N<A>]kF;mjF:87lJI<J=JD-l`=UV-'cATW_1K("LeIB^GB4-:&Z>TTSkeNC=Ud3E4tu-r4&Q%_R/L%"4Fk%5ODmWLrHNtl/^AdZNo[a8/?TW6.ofH]5:=DgMVao/64#/@b*E1hmC2!^k"K/GAs.`(ha<q6:FaO(VRs*NdN.J"8+W]%=tNc+)M-^Gn>+tSfR]"AGn('bENYG"0_!b'I:JgI9%=%Uap@($:ad6k6stgo[HX-d#7)0=A@G:&A4'lslQEjcZW7*<:ecE)bt*j%%FZu_WCP+YbNr&qtGJF@23Y2OSH&#9&eS]nL_t"r$6SB7FPi:/fK,dftaKrBH#cPkGq6QNrkHeG<8@UsYh84OulC.hlEaufC:tJ;*%_?j%Ko;X,)+aDeQ2V;blr\T<rD8=m;05D?K#QgI9\(]0&SUf&qAl85?#Dl\Q,9eF5DPtubV@7,VTM1cM,SqP@DXaG)kHV^)dnmBE%7iXUqK,cft"4PUE8s@eicU9WnKlOfsQ9hu6Z6aak,WG=..Mks>=&i/ZLNZs"VJEs)__b&F@]XQ(Gffs(.BU9T)o`@7EX<!,&cGZ!%VQLl4D=T$*..`D<Rjfb%?A#6@ZRF0(C^X"Si.MA:rZi_6.t\o+gM*PP'TK$:@UG?0U1@1AN5.(/.bC=UNf4[K/L=n*.p07N3t1-R%Jo3=iA>J=`f'p9S0?1$?Xur;pohDomj>i=MW8JWFi0>_S%[mef>_JOMcdmD!eO%C[/jk(:?q(eurDh\B?8JZZ8l9/t=5XXV#L>g2%LP!JVBa>0Uoj0qflWVNoIs*H<VKQ%X\YOkHIhu`j^sYmk@jF)MiU6)=-]1Y\K5Q$eaYRf'#%C8;&5oh]m8$`0Mkns@Vn5Rrl\]X.%$>(u,Wm7CC7Q93[kWjc$WF*>;;`.H._?22ueL$Rk_pUi7>'G-g,*GrS#3UV(PT+8,dn4=IeQH^2$f7B%^`[_0]/,p?T#+F4BpgIA%\l0kR"+(3fT2Wto=uRfT5C[O))O4]qC1q!]CJdpZS;--JWb3NJ3MR0+Ua.P&fXUQX/4qN;ULVOne0J.p8[eP`SB<F96T!sP9mEeA%Kk9W!e>+rHT/ifcPJRS"!d"E#2-V+Kl9Ma<=f\Ak]MZ`RKZ=.%JoTMn/4QttNA.4hI=U#>.2e5RC]a*iMR(Cj%u@*#<K.hV(akY'%X:p:rSfENM51XgE=ZQH)V(\*W%F'=Pb&mcL,6muRg!"L^o,Xp8YU3"72Adgj11CUZGs!965ESp#=LKBoZhb!S,KE'$)]sR0d5)L]%1Y]fd]LGS'Z9'pJ$u?VBh">icUiFCYR`g33U&sobi=?-2S>"T10^+%LN_>K>:e\C,[!,pb3*gLB9G9"6`kl\01[qk^Yn!uA@4C1C%g^Zh1i'qtEj6B6/Y<q*XAG2o`Y5lZU+OXZ/.:ugdE9+r&,W^QH$_=<,+!aJr/u[B:KL?Q"eA3tqDKN[*NHMoR49KZ0HlrI9G@h!\%E,]j?QH-b'i2Sd?npJ"\(n8J^I%2d1:e^98<1h+n%)J8E,edd'Og-Y&EE777@_i"rS1?=F%`oE5_aP*j)$L.:9#>1G_T*k<o8Lk1%kcVAl%>B\kA")Ao"(dP&fK#n]VSM5LZ7/m5]XTig*LrL6rF.1eo#q=IS]pBh@-Mnt6.D0eiXn#T29kPk$+e/Cl%pCM-p"k[=?jm%%<D=[j"F1(9?,J'XY_."k3M^DYCO;CU0Zn%M/r8]V!]d*;gTj]3R]`4/A9Fj%Q!_`SeN8:,1SN]l1[]r$^52nUr-%WKNn_XP'$nJ=%'jK"PWh*Hk/X[)M;%c\-cff_^%8;\+n<`7q6]ArF=l_%5ZPs]e;@NDQ4BX25>8%!7S3Ca[-IBm+]>>>M8'^TM)q]7;'E_f\)LN%9%_n0C*e[3:)Ob4t+cZ:@aC]mb[F+ae$(._KUWMt+e,T$mYYY>A_*9W=bPA"rKMqJp0%F-[PfJ44R[nQ.pKmbtd`QP1U4@V$Hlu_pk%bd-QH$+Ik+SY3C$fR\1?SuYA1",tigLK5-a,-D_s>G*E8c<q.L19G&m']1X4a+8)IlF0+Q^m,c?X:FS2bjCW>gnd&t;4dNZ':MtG%:Fluk>6T[dD7*r0W]XKf3<b3d&;7+pq3:brj:1YkgSq;,)=k\mb7[Q10:m]a%TUM`C(fsM.+O,;j'q8R1JXnY(ZZ65$@#a+`CleJ%T8JusU#e^*'j7q=nR*,<C7F7LRXj*Q966g'F*a*cobiu(_PBkZ6OROQLEa&mjP'59C9][?!@:DqmO^EBG73*R.1YV&fe65VY[YpK%B@"&C,bi2?&`teTrXQq,R'hOPO>cG,Dl)oaV]s%GKJASA@EYE`*A1Mrb+C)P1+5$30a%p:fIRpnm6Y[2La7^l9g.Y#:!qa:kupE7%m(3]%<9:-S"_&hpV$'2pdR7)G[\:'2i%aj.Vq:f(E@q%TMX-=GQ8U!!D@eGsS4%P*956adVJ@OBe2G%_Rkhh$G*K@GZIRIlL]U$Q%=L#jCbsrm5m;()DM"3(f$&I&5)6PD&D/.KCDIj0#DHMIc.A&'a\6r4@C!R-5b1Ot&&-U1QfN1!Bd9iuI2_LLbF<j7bVX\@USfhSK%QO_3c]Ms.!EEfBSo;MMJ=u$9H!6r;5$mJ.%2M$9N2I3QeTH^1tl"4b+6;_e$#d""o,oK?<SD#AX4^_j7)&NW[k%qPV;$Y!m6.LJ(%Wbnl;:dV%\3msO=&INSP:i@)+]J9tSSJ%_#g,ru\Y7Z'BS:b>]nY*1A(36+Z85V6=9j*V&nX&71brTMW\Y)J$>u>d7Q0F`Ta9>IR%SUF'8)]uQ7d"!=JMSQ>:.tVtg`G$5:)M"g*P,ZBuK8P'_P>oqU`nE^FY?J34C-E&JOQt1J<Q)6,g9sRuRC(mGZu#pP\gs-;4LC*c%-(noPB\=:5rZ7;J@GG(eo\^,hVXskBiKX%U!ms:M!Gihn"Nb<2SB6BL(H2cfOB4G#+.FAub=p)lFi@="C.WYB$pA]<-@<,][1,)!%DEM2Kr*:(CV3LGs67JRHi08[ML607;8=,Pd*!RDl%[%-_"E:o.Vp]<o"<tV2;"&@p-*p$-F%8qtJXa*%D,=a6"Bm:$*NmR>:_T5d%?*%[(\&31mC&'2`X_"bR8D3;S#a3"9.nc:&bf:Nr5WP_K@W.?JPLE"=^R!]rV#tY@:-.)BKnnho(jWD'O7TKn1J642NJ09*88pg6%)=*J]'H[.5'dj3T9/7]AWeP.eF6j[HC&T.L$>`nK\VhmEk#BCcYn3=VCd"#i`Zi5U(DRD2+_[WSJ/NKF^/K!kV/1+J<.g)\V3NWg%-=Q@SF9"oR/O.94N?]3kL8nPd;5.(;!W6H%<;+`PW)Y6L/I<=]6BL$%/R4(KAV@(\N^QW>PfjDGB+8&acW`44)_Z;W,\/a>*514q%mW$YsE?$:;gQA"e.lbG#S@'HkTnlVed<GdA^sgIrbS\2okV+PimV)e<",3)XYC_p$HV9BpiVQ#AF9sKrM3>,X$G#,6:YDK]p)?nQ%&<1Xb`>BYseCJ(3;<EPIN,so9C.+lIY,4M'7M@Xr<ZER?8bTPGJ2dgG6JS4mN>^4&kbk7GDIG+l8mQroc6.9hPoWhJJ2m-obq@sg%P`FbU,JIsq2-u]d_=DQ^>jMn4[81`HW\8-)ib+CJB=bS^I#'Sq_594H1=J?RDlg"Fs$6plJ>lspfo$Ht?tot6JqFS*+3lo\6e3lU%)VQ`=,\\UP5;!mp@\P>IU\3qa\&e,n8_-<q7PM<r17p\]eu7;uc*#niUfl&K=<h7IY^i0)RMh.Weh!6sR7jds\/<Pcj_df3@nA8_%Otouk*1Y6W3g#NhX!GsHLcXQ*p!YUMd&;5:R8m]>0,B5=Z$Bq_P_ochEeH$KC,DSjos9qEah!Pk<D3a(QgnADpd?T=ebTDI?'4te%j3VK,$hVD/L`PObR\`:fO!&K*Y1R;p6L*d_bhuQaop$P%brAgf<fK+^d40J63!gh=NTU.H&:&gU/Yj9r_F*pGj5TWqTJaOE7VQjB%'Fh+]^(grkZgJ=/nn*Yp9m9&bjb.o<>![^SjOuYHdj$sIJg1oQ0TrG]/rdFe"KDea^_B@@H-892a>uBpG_Lbc*[,_0LB3(e"OS1R%\$?MGr"TcE'?"d6U9GtpjR6(fIRZUl)Q_'b8M091Ra$\:-BtK./ngTB2TE9n-;q"h(N^"C>UKtoQ02/1U`->7`q@6/JL\>L,ec-g%5gkiFh5WnpWhFbJ!#9`V&7%;KS5BY7TG0dJ'-THo+I+$jHHDXa&B"lA3q+Jc"NeNf]5mgPGHaKi?(c9*@t\.6p=u#.9&@]m7J;%k%%MfFEpI=PL_Ot0cfH&Af>NhC5kIEc/('4>!bXb"=F""bG`%^0j(tT<hOGN$.3)MYMjL$oOJ/Cse*$d\!J2(['@!FC1'4j[sgGi(M%E;6eL:<Lg+:U*%Nm;a6_KZJq\?l-'OA!c#Z;[g*i5\CC@3#kIe)kFP4"hEG(/>_:Sg:Rn[oH:;6]Bn>`%IVl<jE.SC%7(+ol%"Y!%j3/X:#s$fh9E@i("POJ8F+9)U;V'AqZ7.Vg@1)#W.:<XqnBD1^:ak'hDCqkS!oqqQ)?A:2F;q(i,GA;VBc+*)KlRr;(TN)s`RToE%fj,?PFR5cV"X+GFI+IAUThqSE9p@2c6&69e:Zl(;ehG6i"QOR$&?%93.0@V[%;iE_ZOe]VY]Cu!NC'/d@)TKon^Is[LZkOIT"e]e%lO]Ne_TS6_l+j=!;d5<=0aJ-&]Y-\:,UHlp]-]A/+p>4[&lg`H#!o>.],YtFXOI>srSYn^IQI-9WEF1$(0*=lb\okO;,j1WhCO2+%MSu7)o85RT74eP)BL$tO]ijj[#\E^.P$^_)jH1?!+dE0_QpXWn,p7edK1&h:"2>\0'=ie#Ymo6GPoF=3B]GV^>?)Sgpn:TkLPDo7%Oao^i..^Bq"m*"NEigm<MJ^orjrNI+AUeD07HGmenYI+YlRfo&^kraG@%sTPC;eWi0$4d#U:_:R`!P@X*:[kF!3F.[#hBt9$fs:b%GYr7:bN;u:)Io]^F`Cn.Cs3Mg.%V2E_k8D8Nr!Yh.El7(bUOAr<0c6":eZ/5@OVhK<fcFSeOtU:r]im`i42/,J_U;N<KJ57,Y\Uj%\Mh:.R$r\W:Y)5c-2A:`R?Rq_P@"n`?VOD&=CJTQ&V87"7p?0CJf'M'/0m32q:RMLq<F)Y?;L4L&SPK'aq'rc1Ra-`;o$L!7aser%otTXZX@"3d_(fO>7b/cs#okLOn1lQ+`G1hp):!nn\S.3>YF\H#<S/;q?K2Jmo%"W8e$=fB1pXjSScUMua4MO*j<&pc/S#+Un2]D>%#7("tH_N0Pdo<P`nu9LFgj)EXk`Xjb`">\TC+/WjTN1KA`n+d[_.&lDbZF:T]/tNF)]=;aoh3-B^r;8lL86MTO"Q;MEA;d,CI]qI%(oC\QJ.XS@NgKYtR0d]qr>6B:!Ja#qYJ=)P%Ke5I[+.ZK9[1*1b_qT8VNCS.-.@5sS:l2fna.4e4P-bYl0=#89!V]Ebnh4J(R+XK%@c0dd$Hl\GGR2_-R'TD:LJj>/$5kB_rXn7aV(CN?4epGBa0C9D0Je]8Wc2\g8jNjj_?<AD"kF6Tgu!t^*YqE8V$5DA.La`hi]&@t%Jbbt<o-Ro6Sl"'.\0sN5b#6MNX"`_m*It;T%oZ^R1ZhI62p34-YmMk/.l;IOnN".pP7oQ+r]eWjQi7/"`Sjf]WcBUV[AShO?^2A`%6:P*ta#O<QUpPA2fUA(r/9Y&sgnCHL92LKs`G*Kp'!8B_9O8)5Yat5VT1?j8B2N8G_ZL]3-oregC=\P(S7<W]jG^O/DRd'!d*a82%$<DqI_lP/7Xp2K98U3#DVMAncgVu]gV5:tjO2F_f1)hkDUpraP0Nuh]"]I%JK%]KC"4%_a>I-D!JHtt+/Xt0nP%P&\9@-J4KX_2G%\k^EeOLOud59pH0K/a+)N4-fZOJUITXua4bo9pD&+P=bR*eeI*h2lrjOgfLQ'8FQ$d2FTni<#EXep\PHUY=%EPL\HZI'pk2),6;_%_]V!*+Q'1NdKb`"G,3[tOR5P44*!Sm@+[e?43l@bG>"uN[tps*fFap#f?-ibMe@'\6,6"]i2&CZ5(BBYS0mP';V-n]emo4ef.n^N%bI_N\'de5@e>[N^Sl'm5Xt"gnD)C;-.)%Kg>*\huB,a;A=;K6!P#a/]^m0^`V5dQ?Ja8HpmC&80%n8Rh+\gm"SneMa#b2dmK,(n&%JRMM1*O*#kk%#i4i@YD8hG9QeM*0?i[b<?3(9EDa[CA<VW+%X#&L<2K1a-!91@/uU=:=R.W,GE%;;kG^D.-9MiZMuiPH:LO+Nptu%P)q,gA-"&;l:EL<F07.iUZE[`Qg67Qd83b\aDOpr9dc[cY$0S]Oqc'6N6kW0GlV*dE63=X-<5,%@-KR/eYSXA.fa*/"A=n[#[pqC%W&&Z&9:&"S$Z!Aic&?1ijL29m<?["XW^7a5lK>06_)traW^?'$L[r732PE&-<)mT5kGgiNVL]18Zf%B$4iV1cCeC0_l$uG/.'>Y>%>sq'!'mnIYcU/kb:,qYRkZ]mgeZP>E]d==]9i!YT[Q8tAKI?tFDG*R>OdoZPdtC^ne2sKGcWXnkC"i=GA$ZoG,hYZh@KE'g'IX\&%VRDa03-D[2c@LOgYcZ(?"@qLMBL=)U93S;>57*7sNSI@dC21ppr1Q;^Q=1_Cp-Lg-@I+'\F^<O2)e=N>7URp_38%OC4Wj#-'V46C%c"g_YkYBZ1h5P6hQNTnl)uU,4Wsh]FC(*\$PCc=W8`<4_43]X;Z:7`ngJUX-\X#bATM,ZK^a"mY6Zi&Q7kqDgiXRQXaoP*2[DI*$%dfi>e"et!!Y5gP$/kBP@rd%c6Sq7b(W/-As\265P.$`)WOC`(*ZOSJqe/Q]9=q\eg=HJbE*C_j%_Ifu-#$?r!";Gglp^3qX+rNZ0%f>.pJ;D%iM_Os=#Ege-AF&iO3("a&sTQ#GAm(&dc-H\kK_^16%bURk7l6B$^1q0<e:GUX;(4up(\!qA/.(Y4;8ri6^RbFk=R</EM%i/$_HWZZ9k>QCG4$WR@dSAkOiOY83rMq]!rjta>M`(<o8iM%C?!:+rT!,e+bJpN^7?b1qjh*C9XX=_4DgBRDZ<<nh!FU^@XU1kp?%Of4'n2H$N*i]Anp/o((<"h3kZ5e\&Yo0R9$-(5A-JcM+2R2pcR;PZU:-!MtGL*Y=1:og9:*+9Qr*7_KRC.UYl3JhMM>9].0AN`jJ%HH&F^XYi3j_.ZH%WS5o1m/(VK)$4VG\1%4!Tl^DeBMk%f$;P/O2-bRh:>:_<%TBd;$(S&5X^F-$&uanlnu,KL;'h^4D>@&m_H@bu%m&VT>7Q[Ve:#JufCI1P!/TO!G;*h8;P7aGkn,P5@Q+:e2PrM1]L$/+6D2O7g=WXrLWOI,^BGh9X>Z,'fhWj4,.t0!gR3cJIS`k:,%05mkQ<V'8GAI;"`STP!&6GW0p7B.,$"#ZGO^&!e%4,%3I)<HOA.K'+BU[6+>V*&9SN?6ZdW)1T*9'O-\;:q:2QVn1s#K>PS&W2T'%fo$5*9`bi+dS3$(&L&iH#]D_*nrQ<,G#0W`.+`)F7h5Wk,V5^md?j`'/6?N='Tj[U'ONlIJ9E)NEt4:aA?jhjKUnG[-jMmR<b-kA%%dKH9Lq/BLe_R+2I0C?R*81b\@sie:C8rCf<r6Q\S7CK44)G',ZZo%`/R5M%TSUA$Y)^*7C3q7!W"LAPU(AnZDi)n8%Uo0<n'V']%(?9t(L#R*[Gq0IGSD++_<%r0@(\>\3g=B"O4tCju&]P1iKI"XlRbL^GXct_ZigmX^q6!m*B0BWnPB=Ep-'0`3.jLj.;@Jdh]c3l8%RQP%59%tIM',kLun=hpYF%0mj&tMVs^K\Y-a"`FZ"@]It@;25D?'GqAj"?_8;:g7#gO?OMf&ZZ5<>dbuL2\b&n(;:iUh$Fr<u/7K%qK_`<*6\qcaDaS5Ar)aPCe,bV!8?`&2)*a)eL7CGj=Q;?"B%fKP[5Cb9k:N'C+?718n]]$Xsk(V"IcVOMdh-M)]tf5?t`RL)%[$D%@/9k,:%*aGS69pi.O]aZ=d,m,5gQu3[D4U+"t(ZNk+^-YDh58iSW/&jC]mjaWg3jcoof4Y+>+Fh$(os)8-)EY+UX_K:`Y)QC/`d_%pSm_,P9Q)[MHIq"1liS@&DL)n!)m+F:6VH@Q<#,`)INeF0P5))Obgi0Wa^4fk3ZK_`)+SGggg7TM_g.q<0cCsefiQJh1k-9#'m>t%!FRrj'h.Js6liC[3f.ATE!D+MW;QSK2Ssu62kM"C-W%u&R'pA\oPb[>A2<kZI?\=[,so0[-b@)*O$r@$XA6B@4*#tsh_9nLOCh(%%-Wnih=I(>F6FcNoDCkL`X16*lUf19\:c49hN)I9Xoah;)+>#mI'6)$:XD1]uOG\DPZ4O"<,=I;;%&stWbU6I;cCk!\JcgoZrr>CD%m8n_Ldl*'l=Z!]]5Z`3XktN=]:e9dZ]WfuhC50Bq<H//k(aFRXLhVa$XgSiVc(NVVKqcpeq)jU$=]2CLBHp?s(Q#<[*Q:HtZO35J%U>cQ$?Z81'L6t9NlS:U$n#QQT3tgqB9j/h@`R?nfnL!q/QWu.a&_[l8$prpQgMCb#g&SZ]l;6AO)JZ7Zg.'#(V\Ie^b!(n*=O27K%#KjmucBZ`?7r?2fX/1_S(T-XPP1tjEK">t-AC"4gHi[:Tlk;'Q4t)s$-!M(t"MD(l&#YR*_+r`gdGT:ZOh^>P,+P(1L^)t&R\1p1%*&Ui==jLc-l[nuCaE^4S+L,S[`8VJ.$*;lrG'!q^9kS4>fEgQh=BTr7MAZXEFJGoA'Ff<Eq#==t"Nu;4h&o+dq4P?I+FJ6s]^9.3%6=@o?oqO\U0D@Du7.RHfD99Hb<+4=SEtRJFq;Hs-Sf_.S2+W>fg!2LW:7RR0?cjP]Tj+TjJG4Koch&_s^8EOi-YG/@DhH^oC+D9D%,qq_hQ&*D;%NV4`Z=Z9f#??gZ2R=*C,6r;j-1qW+@!HbnGZ8B24Y$!*c.nV;W(\YDRAFM.a5rt2To:@3jFXh_G"hcYM5S8-f(SXn%G_l<lZ%sqbAlMbY$b-cO1Bsm;%M2:6pXS'MoXfBJ6Ojhs*3=9K(1Bh_+0'@bE*+EQoS*hu%Y]cg3e1ks6!;@d[V@R'pSt2.BES@d%EJ+)4O;t=k/X5:&2hr=[:<EE<S3ZLm_?E75laE%5>rXJcepp0>VoY&+Q';kCTij-QIb&W>!P.+gb1#4gkg\1As./e^ls6t(Ch!$+%g2@2u3A^9*/PpQi6+i`\$cVuY+?j&j:Y'A?"omeN+qKpB`1^,"k'48?b<M'/M,9<eM.Mf3p7A-Mb<luA^kJ;p?gGRA=B$$!a-5%:%+"bP'="!DnW8@>0dX\)</sT2^(c7fTZ,Oh#duB?f)Xs.C2$D[s4GT,6n0D1HqI>(%MiAZ=dO=1=oHJUVi,eGLBsX5N'a=FJ.2b=R%"=9gPnhap306^T3'u]O\7T&G.XK!fQ(JJ1(N<!N0M'+.gi1:M=RA2'1VMYT;s$/Y<O8T4,KpO1>Ml(oh,H?>@E1P'Q/<_2780=\G%QL%=EgBmN7Rlu<gdL9r90PkWk]XpGEAGsoY`.[q$.%a=)0sY\$79R'jK,Jd.8t+Z\iM$C.Z9\*@FCm&OKHcU13iJ4EJM]a17\IJK%3LD+1"`c^L3Z.@\$"0ZtGtV($M>24/-n$*tE%3EVe<V_fU,._e=qaG5FSbb4c-&.Nc48hb&BRLp@P1?IXJ&"aXE@a,2'YrrD^dBE%An;B%O[k970I?+t$LX.dfpbH$I?@+m)StcCMWl_^`5&)-WHn*1TV"MKnk'2.G2)o1G42Y9n-QHt@S+ehF9en._[bUtem6[Cl@gCF%"jNrG-Cj4`GZ#cHk'T]C&jC6;(2G"M>IS1+]I=l]Pj)t&-5nD%GHl\?$"G_CNT-$K#p<JWqG">>_,+s[$ZUS#<ZibQL]2A10]J2d%Ce$D#YCF3BCVlIp2qWtXr9pDO6A2C8@%;%3.i9up75(0""T`Y6<rl#]fMQ^Ag"b:bO[?WL[1_a-L:&<DYhe!]U2&Zf)'t<9Je40Q%T&Q_$.DH3,!N7=LW/M"0*ro)D+2iq0(pW%=PpPrF1$:`3)aPr2:Y2"d9$#IP\Zc-N)P8]ke7t\D/\&ns3ti1RYe#(;WU&`UAlKnX%-&nEk1$8j*;f,X$Uc26,C8&T?K9=WCoCEVV@[Y@.=%q].U[f''*S)nuH/,1Mg!l1JRT-u\@4iN[8b-Bl,);oV<S_OA.Od2tR6``*%P*o4L-0r"5R^+q,E)_Bh2Mr<uJTftjg4U1.!kRH7^S)]']BWrlJXC4I-TnjiZ>O\Bi$;GnFX2$&p1^HHqrYjFW0g9D`+D+5G-R<+%"UN?rDR`^$7I3;*?3,f&%<mF&nE-b^mE"8h.!3kT:6Vi<<TTb)<i^a/a_]ME?<6V;q0M9X*jQn;M2M[r.Q'h-YVLdn5]oW`[b+ic%?8Vq#-0*GA<"RJ3Gr@Xs`FtEIK@o0bN+O(o85n9!*1N/Q?=s<=@-EBEXDL9:W[PjN(ksCCB8H]'p1b?hf>e%UMkQ#qNis5(eDUO2%I+'CA*hOseOnKXT+)ltB!1C[i_V`@f11u3hZEAW,lF4QZ&.3rT:Q<5YgNq>FoFn"J35ra*YQ2Hp>u-d<f52OCIW:gBeF%j,p5L.J%(X:<5Pu\;N>9-tDWoQDIX44bZ.ofU#*(T9oRuSoQWp5#@3KGc.,UD$&co<2SW"dEkQIJUa7P[#C3?b@OTH-iCB(K&EO1g2Xs3GR/%CJ^3_T``*Pnn?CTDobk<4R2!,T'?_n3bpu?WjVL8ZTL#2:10<,XYu^S_lue-).>h.RV:s\>"0!V@V/JtUiQ-'gDDLKOBR(Rou=;X%$k(II<,651K1I)p!mN$3KfY49*4I-?VQGWR+Jp8o9B^u9j9:p4X[)3n:1+cCH^lS$Q>(@N1^^@"(mM?<U]q>knm&Fn`7gB\F<R\&%C?r#fp>O!^JB(V`SSD>B!F&]K]5iQ;DJI+QpVYtmE`+*caUS-u%+aX??#22M^=04@,iZgH`]nJr?S!&0JiC\L5IV)&2g:D&Ke&6Y%J>7_tVdZkTh4dht(VU';gQTMYE9jNpg6/Y+3-\;%Me/afQm=7=Fs5d@4.pPX2L$*S("^8h(,I3"^k<5fgLeetl8:GK#NQ^%0H1+K%Le3V8,.a([@h$G6!\TcsP/b@)CKupQi?DL`a8e.a:-ah8(bjCiPi7N7c1ARV=/=AI2M[I+D$2jM,EM/LYrE0k*q3\K[!1%h(/-`k%KLjO*'e'JmnnX2mSFF=0YF6&E5Z':n(jk/upLNMc",`=_&VC;YYc-0)Jp'4*Ilt,]k$k`ce?T-9I4I>q0F)sjod];S8[--BI(?Qm%_l]+l+D7+EQBiaM$K1u@Qh`<dS/"HGRu\=?Y>!k0$,lunUMqq;mj7,tQ+0Wu!o:e8rR.fd8iZCGPgo2Jpdu1dP?cL5:dbVKZE1rl%OpItDEN>WG^E=='e]b0]B7"1nS(BePnXGtV9l-978\?aEPo0"L89t?m:t')hZiT0nW3U;YRm]+XTS>G05Ye;5%L.mAlq-?00j+-M%+=E#S!@U&o^l6jO0AFQjSqYEmk#eU9g,X6/#TjeA2"2`l`6otDA7&?8F'DQKE%8eP(L//CS!3DnoQCtl!tBHcQct27&7l1L)T@gW%k3KIP^fA3/6*qZ6q.n2H01":D)qu%LUYVK;dIejqT?+!K!Ok[M)9AL8^cDW\9lLtA\W\K+[I1VR_BO]t!CAU+U8]<D/]A0tZDWST%pGU[5m`6KD)7.Cs6LusP!fEp-4?LV,TL(GH;.YY_SjoJL9<e8>1`blQX<=m+=rVI!l_Y="6'_(rlCG%"[")C'A@jETA;Tmj!al3L%UuhqD!*lTr"jK>$aKH>cCZ:'oU-s_\W4;aLV4=EaA[`Xi'au"LZi\q:"1lDOUKmZ\AQBGI6"@@_fkIX%jJ4T80%1B\2;7UZkTo?Z%Q8TUP\cl(-.EMgD#NL4"G^dGoa!ZZRP!n%K3m4mj!4PpYF5)i2d@$3_$KPC'k[;3)?o@WB7Uk'PHHEq/4T[jrn],?Qi?h2cVBB[+%#R*lZ3%##d!q%gA^EJ*a$LH@j#*>aWcgW<ZPQ2'o8i@:iL^Y(,iX:jhEb[\gp1RJ!30nC&'+"0pjBe5.;Og#%gc79tIOa!q+HFku%E+s0[,Z:R^3fFfp)[7<nX0NaC2TQ/-*N@gqi:I=3%(B[aD+7u$.oTir*[!p+1=]N3]"*o>!/W*/ou's@)H)2bebY<<m"<TdUpEmc%c0K!X5=pWr:p`YqE^C?PJp(aZ"/\C+$tb#+E=*7R@h2-uU/?g/dd#c=l3hbY<??#:X'`ee[]APrUlneU/nP0AC;I-ZJuo<HPER=m%?L'GP"*0bpFJ-`2k-d)t"G*@12EqE#*Le//@>kV/Jq"L,1H:>Um_6.(K(fc@cCcX"gW\PTOm[Uc!D<&9fqMNRQ&<YFgMKsF0s/8!%*:#Ju@r6Kn#\Ck*8>`Rmm?hFigU+T&!cGW^%fpS8=hnNo)](=OK/f-0[0&ehXVXrX6;,d-:1oZgN\>+D/R+5;e(K`bL=D%e`$.2[%[jX]s<\@otCMqQ6*En#HB!#If\&b.u1NciQ1Y#aHTWk]:PCK=G1tI$;p@(54gEr;.M5ej(Yi.)7:c_.5)KO@D)+M$<cRpUA*G,71%O.UM*/`"()</RJ?`na]qr=FUHGYh5.-clBXB;W,-?[$W9Y!Ch_k[;2l!'"']X(5JWn5Y'$(K5iPmiG'VUR&P(?:D30e$NfYY[n1&%Nlgk?037ij-9,%g!lX?9,V+GI+;W@oK$N)qTR,,sBP%8mGd**gXcZ.pKXArM+0:jVfIS]7BUatHT30h_38!.(*9PJp=aL<n]mA4:%`8`8X4dbq_C+&_(!bYA<JqquDIQ]1I%KV3f?q4/HQnZsFM)r,kD(A<YSC'SB+e+.@%M58*r`)nO0ejqAAb-AZ,F:ED[FlfLeuW#G%gHkZq.V<[)TLs^t@).j<#Dnm[8kS1s@bs`VUdHB]F)Gc0bp:h7i%+n)n;rsX6W>g1O_CTq"/85]!jiP!kcq5VE$oIrpQnZp2M*(Q%a!bps!imf*;j>HF<&&A@h9$"??kA*=;;^!)XW;!l5rGRW!D]7@_bEeB%2-K+4[cmo[62J05u9R+_7FKF_H./_]7WB;iWRs\$LM',%eX<7?eU`/Q1,H5D$D^Epc6Q<PntnH?kd+;4(Kj$/"3)Mf\D>@6bQQ2`@3i:r`3$HUJib;"eH"hb`AG5b#E6Hb\4F2qQ(Dt!%\;Yf%LAmA6RWBLl:OS@15*J0pgm8fbHBC`#@`oD6Y"B]=87IIsm&aZKX+XrU,st*@$66HTl=:71.+#G*gCaG8GK"$!k6pka8d?4;HKVa!%X%^3!;W\jep%K,)8?ptBA\iDK_'T_*Z"M]"U,S*L[#J,ROu0n_e-@rPE@+d<;CKqSP^#X_SB.`R0iZU.7#1&1F%\-4KFBkUjBdD=%q*YGik.EY,X0=jbLWpl?"Z4UK$pt7Z!tBNo(>NTcKMUk:22SM%r_uQ7i%4_E--!M(MA<?8Y5&'/&K@S:Y3WNiJmBn%Yj2F,iAtdc%^r,hZGjKLBTn#d*$Q/uP7?e2nF5)?^&g^^bbm@YFL1sCAiN*B=L*oYadbtJH18pAj]S%+rD*p[NS]OR;!f'?k"iL7"iYs43EAXqL%AQ4\JA[<<[BHfMIM%O0rT"s"p\:S,jT6`BJ.hkY.3([g/BP2)%du$QPC/LQf'o(fF!K56?G7LJmpH20/'hI]]IKDgZMWM^][T.Ei%<H>p:kTHr(_T<e&$O7*?YlZf+&\Ua[+;MfkEs*^N>%4Er&i'cL_HgTmdR5?=Tdl24V.?<;91kbj-uk:2!-#5,4H3aYX,K,Ljk:@$%<$^,M2IrGK*+gO:G-77kiJ9k_6*tINE7kQN''Khg*X\(XgO-L3KkRR\E#9K*B'NTBYd6gL#75B_R`9Jj<MIU`BS>?oF>kP/i_>ts%CK!9XJ;cCf(Os""O%OF4j^3,XMWGl*NKidfa]ERM4iII=F_%n=,=00H]ppj'I"mbS3EoV/d-9_UG1JerM4Q9PAKlH]PGbCl(FdD9%bDK!($_#;)4Drq0MW)YnnWDtqJrY3[op3YM%sUrU?oH#P\rXljX_o`uUQB<7F'J7`+5RA=emso9a@4Z]B@YH[Q&=[9KmOO^?%L>P%W.%LH:^r+I/P-0N8GOicr!Jr`Y_%uHAFA!4\O1qC+?fh;ql).N]&:1o6#@atd4Mi^":l-9R5'Bf=#iqEWtb(2TPXc;m$lb`WSm,3%-*G'm=o)a,2q7ngVtYaHi?m[#E0G.ccf!1>LAT]]&%2f"<^!Y'9bpA^0SPuU0X@33Va;b;V-#2"-VP-rce]Wu)1rq6ipAi`.<spA%:l;EC4RR4d9J%LKq^1`YJ5?qf($g[f7aACbVC*hD408lPmim\U$mKt-atOQA/]>?G)I@?BVs8ae@IoQb4:RqJcGd#Z&UKROBprWZ%AIH-m/VhO$Qt.\Dk>U5DOCS@ue)F4f^BE5%b"/hlWEPT1/P,kn"8?mH:PUa2'+g&<6GlP>NHqB':ku+#f=J*Hi0jqn)Dn1pJjH&1%]n2I\keOqAZBr3<-!QMQ&Y1fldfHTWmfZRk3E:9k8tUJSe<;?cM..KuF:]urj4&5tU$=JiBftGVM^U`bK,M*0R":SeR^1TlFO.=N%>>B6g3@eh],kX'&T#^uj_6c18K8IGdkU-cT9W7TIehX>53I:hXh&^V;Ga+epWeRLOM:o2],c`)b+APHc?YF4Z.E5esWqHS@4okbW%W-feO*Y*2"&!BpZ=PY">9!Z`Za13'HdbVf_p@hHs,QbaWmIf#)Ru=?%MlS5;])m%#NVOAP^O8$%fQ_N6UAt2^fAE-kh<qq]p\=UN%F3UrZdHT3GPOk9ga#B(*DdND4hehG@#H*oT(JepDT7)'+VCb$E^:nu)j#>;%+)X:AiO&W4\*9r_h;6-+55f0l<R\`X\VoLke(_Xl%?FmkK.<k<fr]drBEV9+qp<?m-]+=8agjXY$([KgUlUU,>B,?o(h9BTi?<j0QGB&-0K5XP(cE>3PgtulHPe4H:3ktL\L7b##423e*%]_V3nk5+sr[$<3h?/5%ua#B69jm)R3EjL6iMuUetRtnF$=.AG]]I@2Cl$`/_c.2jQqHiK;ntr&*:58WFCN>da)s;_:[D=a6^Gb^K%XoH41QiG$ko&d6e\n0k#VEb+OpSRW(VN#t4j8]/:IAneL^!uQ[GPbASA7aTs_L'JW,a\MnT:Ftljj(X0q"A^pT@+V?!PYhLP8rhH%%K<.4a3Kh/Md3e5KjBhCN@R.Ac/Kt"s8Mmgq3$klE4p(hRlEl16[3+Y$gSl1s/cm88FP-6r;D9Dh\sY+$u_2<q4A)X?b$K.e[Y&U%mbA+%?0?5MR-oR=-Z?7&["4t_`*e`U!Gu&@4OA:kQ3mAB\*cID+\dF7QgW>W^KmEqhg+6@=4dIt`W+T'\b!rc&'r!NI;sQ0VcPfq%r3h*lk4P9(5.u4;m.),j3%((kN:6X>TBO&Fju<<Zg+lk$h`otCj3_Q_gub`0bo?VhrI9*CrJS\brpD^/3k[ZE$d"$Go_"6nmI\OC%5O#q2IX?-^HZ=Ja^S\d?q9Cn0oB:#eQ<1fqp>Ydn!ZcjhQ`"KR1V!JXNo.KiEcH5NHF%nsk4J14h]j*7l3=A]r\+5`s.jkE^V=hc%HgM1ohZ&nQrM9J)n$deVgUliugg(!<:^f*jCni@a3I%GH+2--c0Al"eoZeZZrk<m8h-X"qO7mG=0t72,N]QFR4)^lUCW[)m^9$&E%iUtk33eE-b\#2:u^3Tn]mMh8eF`BkYG^As?rq@pmr94(K`J^X`:X5S>?bXl%J"m[MhX0Hj]aq[WC)q\JIf&+B?i7CrrOUZE\iG7h%I_2;urbC?XGC*,T2a6HO]lJ:EGp=nu=6T1\Mh_?cRlC%&n^tKpH?o%.$[Vg=qK<6mHM[PdJO2TlT:GY@I-'&Gj2Zbb7:Y3@]stc4%Huf(r;lP]TF2$0jT;^!j,.*j&(JeCCnpZlO:<,gU:2b$b^-95U]]iq@^9QRjMp?ZsA+OY_H1@uFUSIfqS"%+rf2p:Jr/'_U\!MMa%Dk8bYhu;o-1ql-QYM1/fp),I'bn'!,lQ=DjT$c]IY"Q&r><QrCF0tg3Vhs"aS$,U@:Tr(3c<&m*O0JpBqDL@I4l:X8H%,Frmh'9(%4IPeI2LCu$Ir]UZIeBHVIt)Thp3ltjhXpZ`1]>V+@#:l7O3[W^J7[hbS$q]K308U&lL%eUI=M1Sp/un@O7uBqgsXAmGC<Lukk+\M%=XTY>c_$cbF@P;/rUVW_pRR(Vq0*'+])90YT-jC&[^CC"X6"SZ*V<LlCn%3?(Up;L?X-pmrls"(gZT,Q3'"Zuo&B:5B+M/;@0*hD%_Adh\2lH4V5H19H?iKoo[Wce5I<Kp.AE5cN?D"pGD1DT]bm0#FbPBb^SbAUGDoJpV)P7Tho(_X'qE97T]DhL&"b*lRl+mTHe9'>m%rL!$D#Otk;s87q]^&>o3^Nf):pTK&`IfAm*rd-Tm5Q1<#-W`P.nG"B7^[d;8MpmI-J!PTYl_FC,2rFMgqsStJJ+_sGJ,J<$pMO<-%Q/a+h;17A3r9:LL5Q's=am7-rhL"S7%tFE3gTNhgrnd8(pc!@;]_C"!:N"PC_qY,;^]*tkpYLqnT,q7MoBt;j_hZ!OEp$FMO2(&M%.u2.UhCO/$s7Yro5OHKUm(U4.o_RYEh?T\0If%j2q55m+&*)!Mf`1C1(LQMk3;dCanEYE_qcRXjPgBC.O8lKZftkSP?iJKah4&n?%n*TS)s7G0;cQ>?!mI9cR090Cbs7&$0%sYC?s74^\0+PbmdhcTqo"E6(^\Q.R\$lV"Q9Vn0FSt7`LM-&9YOB1'X'^5trU_6t5PXi6%5@=/WIf@s:%j$5iPPs>6h9YdYh>QT'N8aN/O'h69B]$Mog=akVqY)UH`38$DHga8qq.olBIJkh&]m&t(h]3f/^\Hp&T7?XbDr3T;%48kb"\p3W+S!.dPc#.ge[+npaln<9`r;"7Nqj.hBoo%XqfDagLhT;Z[s!s*/eb@qsnCt2=+M[UFTAJ>73r?nFfA?>eXZ+DOs*3_$%PW,1`'D?=h5&d]Rs/*+DcON0erct-Enr*,179CVGH#`>nBjY6Ad6"Pu^4*eG=WT_k0DP,!_0ZD/]`$;4Na?Y'ZYYC=r%\6Dh/[K5%kL\Sir:(ldoO%Xj:Yb?L<tG-4]pjNI;d,>KjtH;??dV!L]Dqi1GuqK;kDrCSpSXX4FSNl?gHRq%a_QC9TsnS/`Lj[WDR/kAq>/u4%M#?j[miK6G5J@$7d;PiV_<XU@Oj<lkre%q-J%rYim^kumqnlc(Gt7c-igmR9HMlT;s3*!-"7H,9]V"gJ^!Zh72Ln#O!Ou4fq1KZW%8&itQp(+ptWBNFori;FdOM<m3qs<gaf+,Q@j#;HN3^*G\ch?t^^\dd!keZ_;\+fF/rhIAL5/$aWH[l"CRnn2Km)LbDqar4,&,G`;%NkTP;ID-eQ^\@9giHJXVF`?kVIcIPKSj%C>I.5B6?(\oVs&-ueO0?V$lDK,[qO>0Z:O`,/j24q?s$l,T'.nRGYQ!pqL]@A-Y<G2L%X*i:+\XpP0en;Jl[eJI1[kI/ug=FJCo72PirQS-beYiB,I!j:$];%SQIdk;Ujm?Cq0$""^?JmF)p0ZZ?54#oAQ`n04J)1+:]iOHe%SJN%L+Znjgh`cP+Zdca$Su3)phV\4q6cV:NmFRrCop=]?^A6$k^#eY-rnq/^fq7/fJZPao^\FUq+2@C<B<NA(Rm6`Jkd?V0a()%@%"7YD0;4(.?*n(UIY90dB5OY6<doR'OI!bLu]QNq[:\MpQr"n+'nEAJjT<J+j\+br,?iR^n[j:A<oA:O0VY@EX*l$8Tbe*7]s5_Al%mi*jfSD([VAbi2FRNoTBpZ"bfGL#TNj&[=.^3+gjrnq.1p\hjKep;^Fs/NDDNfOZKg!@8PJ'J2[U&4NGYObBthtYC$?g`F<J%L'2%mO46@>P.lS_1*"jj$@3F6tSmg%IuL+3!%j^(f<$o8d:]kc8lL1\)3QoISl@VKOC@!T'k6@pC^i0M2_5B4^?a5)t(AmSR)'hfC/MI%O04KaYd\jopJ88?iHk6ApA)_kMtsf*(ZsGPbFca*0/%-H]\hl%mX>of>^Z4rrPHGC$QcucnOk[-J,BHSs)I!rq##I3jnZa/jE28N%T<GmJ`\56q\&m%;Jfqg>r;5p"lLs#b97'l9\*qk6HG'4$o.-m?4it"*a/nUle'[0O5JFfP9:BA*Ak]p\fPTd4XhXZ!p\=:DXTo(M%R:?cQ208H<nEoS#Nt:F@f/3AEk4\cLl$UUn=.'FI?^RnO*.=3&EO6@u^[gC.a"h%LAq+dkJki@BT/Zb`IJ:k]:=hX44]ad/Hok7i%]!T/<s0FUb4f[+Gp".*rs%)sh^[>Xbl:`:#DpIm5r0I>IX*3Nu9:PP7`\7.kbNZ"oZ+J0eoGg#1D^f%;pNcc(bCV@OMtck0dIM6R%s#GJMp;6>ioG0[&j5JUt"^?tPKZ3I1Gn#"V5*Jd\U+Xd*&Bl38YMrc*p[KgR/c#07QZ(X8jQH&;hVRYUrUB<um<m=)]D4[0BDYoT%f3`hg;g.^)ZecI25Mo`DZTR@Jm!*17>:'mGjJ2Zl&)u4rN8ER>hCG(\(M];O]i4W=@QS\fpn,D>@Lh8mr>L.S/\c<OquZgsSnPl6%r"EapF85iGS:VMpc7\k+C5aY"D\di<>>Em'I4KN9Ce*r`EUemT9&/WYZYeW6a,YXl^;o(hHGnlZH:4dZI=#VdV0JS<qUZb9bP8Fk%:K;as-gL98'.8p"&L;5r!VDM=YPOu7_=.Ek<rWk@\E/5)e&F@*3r&5.,/_\$s!'A]OkAi;a%4<spZ;*?q26>Jcd8"br+Aq#]/%"h%lI!o*bf07?XQaZ5^;*:G4'>U%/h_X#r:eI4ZWF$1'W]eLh2FeV?iN9)/dl$!?CuST3PY7d_p%,ulaI67ANb113IL[5F/H-a>^]=f%-JN!n"q;B[Y^-3<?)`9K+'eeX/E8(YXm4]cX,E=mr9'j<D\aBWqDQt*TXbU!Zd3h2T$4il^],`uYeumrHL`XhBfk,JZPn;&IJr3S%mdXY&r-%mQ2F:d</InqcgmDl\\a)DjZ(Cj"\ZgNonbuY"Ju820.#g1*['5&>PFh$i=!Fqa$JRHJQZb<`Spg?`^I#[%qX0?`ci9EP%]!A2t[Ir\,s26nm"k*UCdf7ZRq$#6c[([-,?H8tcA=g#RhgZYN-uh5[J)AQ0jnZ*W+8tkONb[p*T>lrgs-I:_6b:oKp]"B@1tQ'X%0=^pomb,h=.s'%^^H85P>Wo`$G:2`Uh\IBhhe=0,00K$XXcBkB>8GjNg]#lsqq\=3o#g<_Q]Eo5BBg1ONYh72UI+j'VerVr#iORp%Yha\"mJkE+Z2Xe%6J%h\h"uDH4d4L(gMgm9nmBuYn*U)I.Aa)S_Om$Q?2fD;Er2Rjbe;[G_jRS$m`f\Ci;)1VDW^'6A<uN'Q1_dm%?c,ZuIeW!j\bXSOS@t=,r8C"'rHH`dF/Lh]c[C4h2&d`82o:A9DSe)P5PN_,EH_8t#hc8JCYQ`6a7O>f7W.CTDD1uF4aK`0o`![3%F%_EQ8!tj_q6V/r=kA,;nMYQCjbIp'T$BH@QiGqAdh[9%p\EKTJ%g.2>J'h&qMVgGhRua.?]RB6Xd8^YL\D:MXR@6XZVfhhGQ6QL%o9o1pP['[1huEU0gjK%r/miRu\pN`fXLn:C,L&I:4o<@Xh#4d&1fr5Z?65W-3.n^/B@EtQf1/',KQ#=DZa@[eYKcG6p@/(0Q-7cG%All1BI<07B-VLB#91p?ZTDa^%oeX'A^#,6'rTrg'S"HmufZM&aI3G3V\FXnSN;M3C*q!D2-li+*A'Q^`d?PsQSTrej;6ObJ02M_e%&+_URojao[l."Hl#cK\OK"Dun>6e@a]F*9JB)Q0.g\e<(rdpEmHgJ)F=`P>Dp%?#o7mgU'Z]8\ubd;lqn#(rIO8c<6FGt]3qK$L^%D*)#RaEQmXCo?0m(?Y(XP;'S^HhPal*!,W%^&Fe;\c2-9]'[uFV`3ame'I@XckecC43jAJ)uk:'h^s;%J,X:kr8u\#DfbA#N?m*<%&`.*%g\uXcmmMI%RBsI!l,K3p8KEO*q^lZ/PLn!I=]=Tl5Mg`A.D'_6GM=dR0>;r,ksO#rDLpb_>[ACTXo=^tQdW4ara&+Z!qpqi%DW^ZKQPUDYCi@"XCL6rs4o=Tge'6S/.p&&m]puk3Y+,;lYO2'a'a^*hDCdnp]6je)`cGIL\b#2)-S7Nb>kn9:dYDl[ra+6uq_^<k%^L(2iGj4cF.Q8U+V^AZorbKN1o\6L-hd:apiM@\*dH:am=0JtMIIW&ugA<SuIcf2LLPMW`0BXS:4PLo004g&[Y$%1,54R+@Zdj];%pMS_17e2fcg;dPY2K!D<I.fP#FOt,k(B2$tjeP\A\?<Agk5;?*]5R^0m@mZ`\j$G/SfGB'f)#9e?g1(mq<-nBXi5(fDsGOaRsOcs%Zh3\Bp>M9p\F*#K0]-<d\UuG+*e0J"F1;,6hYa#;YO3IL%?"QZT7*3Zk&8T;+jYQ%BnuD\C-$;%lb,+;)#u\U%&Ph/5&/h:QG21i%]eE]/`_*HUiqme0(H,TIgn!@!mIqqPG'GdSF6CC-8N;BE!Ra-a*UKWC)`R'8-T;h`c.ncBlYG@cZJ1^Xp91A=nDp"jmbQTh$QJ?j%NQ!jBLDQ!<BDSo`E@&g,pOCNWIXZ;`n(8nkN790Qo:PR4o:kY:k[DT(5?`OLJu#TVM^u,>H;:m<_nsF"K.N/(.VuNecRmDf^=un]%T@nU@s7\bC#IE[7f@c?@RD&0&k1.V,eYV".LV;5K:42K=R@CD32eV.,rWi9G^OOG$]6o<FQ*KQ;k?n0cWHj\'\UADkGl-csmb[mn%?bX4ap%R[CHtJV$#B8-VbLl@H_T]'?Q)!3Bn$EUd(8d_-?(\\'kEiA8jZNQUV>Y7FBAPs.,BE`@l^%/,DeJ;nZ2GJo2a4F[s&c^U%4nQ5Drfa+2qsP%*(9W'h>.f:Zp[^$o0)kfdDYqPHk'MK$p0/;>?f++I\lE+[HnLr8WnPUTKoMArD!Y.@gH>mkE:E;U^%4m0+3j/E%H[iQ0Z+E5K!lCfc2)d05[e&,!r5N#,-6KR$TH&&m`(J!PqYdTN>Es!<IU9O.kPTX,0iBMDm,6E`K@+1I/R<\,p):s45N!-'/ZdiY%%o_HNlIZ(f;'(5KdcK-Jhg1j$U3g6ZT@@pGS(W##cJ6.?GHO`"71IChXki4.@WcYW9mc&7=Ia625C*N';1JT]?GqQ3?ZIYEb,!p\%Q?O)Lbt``Zp$'XICt?SYm`"4_Hj5'bS_]jm\9.:Go$0IW5C18EX?BRQ2]lE"=d#pm3;Z@53e?ucQQICMaSB-_Ag1R7RB>9#V.U[F%5$!So^\=4ORJV?gb/MtUU!U26UjIU;$lM#]mGdCQ&)TM9m7rs.n)fA\bjRA7/<JO/\BnMA!l&u/oD6JorR$u*>nE(c?`rOG_nD,O%%/;Q;ou-R%`D>%OMgZ&kT%N=`g#;3WU(ZW#XJog(mk,\7>^Q$YX_:=6O%-2<b87nS_W'L_p0G+;cL*>;`om)W.i[C65@::]Hu!6h%_M)g7Iqcs7cj:W+j34bEVg6qj/Z7eH[pC^oI<+jmhSAm;:V6&?j%P2gIa;q=RQfu\B?lRprHdW"E9VCM#=&3l(I+cYORTaT58Vd=%$C%T8%c4!9F3NDPTCg1#B:&XQL%=DdX`HF>RmL=3>5Bqcd:OHQ%VNAf2A^#d]n8\*^991qH?fD=I/S*_i7@bL$etKHT3q$$q9HHd%C6@GrG6dGth"#,:IbNQCM$,Th2pYOnB3fGb]!ZOb^42[GmTs&+dCWm&(ad\$3T#:ddu1;G^K=[.g!!"dib2ojkP3f[kiG"D%X=Mk%kI&M0aR.$S0<WR\F4n43dshafF)c0kgP=I,IJPlNK^CMdb2R)II4fnQ>AITZI.o+6GN\G@It#$')_A)JAo9j)mh[$.])CA3=FC%T%XH+s8?<E`.p$QBl41f-,.sLC8+ER?;?aIu4fUI:QCgKmkiRP\T%PIeSgVT_@5,8(e\\1S6+p&W"""gr2lcE[8m@A/s*\Il`=2-@m%ft&p5Nb=@(eVI.`R++>6aT,,oF=SHZmDIkn13;c0os+Hr*GjiHI$pC_4bo\WHK"-2Z\rUec<"Ub05QAe?h5umcLdWi]&^uPGDk)-%DC`'$/&01.;OH"oc*asqb0<0.Il^d0q!R?%EY[.H>QiCL-`^@!T:>_hE:M-2S&)!]-TlB-Du]e%9=)sjmTU1?`+-X:=#.t3pQ.LX%r+jk8q0PU*>J7`Io[is2\M%=XgqU>h+e-0a;!'D1[CH'QmqP%jh4*6DpK(]9LF+tGFZh[r?E`.2'3ALl_0s8nnlrCGHKEo0mA7Y8%krV*jS-/Z0B9s*Z%(FuX:Y0JpRXKHudWWqli;1m4G5p7o]<GTphRro5nE6nG[]::tT06M*pLS[=f]DWp(=u#Hh4$>29C^;sPFpYp%qE4Lgp@i__*:1%<\$EJdU=ZssdEoLZNOcqOqJH,-s6QA!9:$^E`RuW"Y.R4jbuR<+Mhf@02l=N@/fSm/(QSmgrc?p\>$P8+oZ$jn%&YEZQ4aN:!Vs;uC$P1R$<"n]kB3A)W]Q=a/jjO*Sn]?F&VL3mNCO^EkrO'o'Q%ai@4_#m5Z#*UH=!lgpQKIACQ_bl2.U_^((@tar%AsVbj8[5[JqqBH7Vkm$:B.nD2[oWJT0k:T1rU9:Im[_\r97G7%T"\FTqY`:"9B?@67gkgLrqTi\]"dan@HM'PAe=+YRDF"F>J'R:%gOB2"[KOaJfCO'O':n$A:YqVT>]"kurqOLnJ%ddJ_@OOMfZhS"].;M(C7\_W+9(dY,Q$WRo6'*Nk5V6)/lri2?VO\pT)4\MEpkCa%K$1@sh`E,?[WYR[G<\ebfg?8)_%]e#Pp]Wgq\PPLX*=E`m\a>r2OP(<q1NbUDqB.!3'2*MWY_FPa*tIjS!nbU]LsT\^A(PPm)2mS%r=moS]5Y`oN7Z0&e&A4<:4J"(EpOr6aVHG\O>g2NoDX+u3a=nZOgf1RYWG75XI_0']]5@GTknalB6/KA29.@3pq!m-Bt1bGp%#(8%h-\Kd5?M"7`Ae[&3LqQ5aQN)$B4H.#S/YW*1ST):a%=0I><>MkhEBL@?h*_MELt#r\`)G:r&h9^k:LKGGs?)UT<6=1Q'H^VQ-to[%qJ"(c.DiZBPh<a^ZXu58a7=I&Edr3FC(4"*_jd%kHMjZ:4,j%+(OU`"M0T"Mg%W#PP\ogVPqN'tc-k_Rm;D0kT5W?]!U]7@m8"7Q%%M!]lInUHaAka!QQKapccW58f\pnY#*IbG68jBuRoD7&#B7&:-L%UH'ASY5:r\Lsd^\'7AdY[US)g=c,:n@7F_6G<apnI`p:>-Lj%`$FoGZ':(kIK,hrrq,pPg8U"e?^op.hjclQc$%@Hm$+Ll??Ir(*Nk`ArUd[NS[*9BZo9!&kJrs`CBcj*VsS$/k&>)qW`qFp$TGQ0%:*6.cjsSc.)QoDPqB'$"f\bN^nWGhS%]@p5'1[*&2$ZXDb#eD&hK1G7bhR\m$Ip+iIq!$e.EalAhHA`@4j6HHl:$?]S\s9Se#sY?%&0Is.hslb;f,]6Fc-g?TbVW,.$KWa!lNbIa6iX1d[5U6G]Q2FAjD.SjoAbPf$[27K]0Ejai07%#"`$WC`8$F0G<4jRYO1M$38,7?%`W182lHW-RR6'H0T5iQ#G)oL*H9(q5HKt2"V_%/>>-g-[c_VG]T03)8o$kG0%mDE!^ULtiYr+XE%<Lm)XD=p#s"F9"/"f#pTinL$%VbEN*._^9!_;VVS#c][L+$04s\CrPST>;tCm]Bo1L-*/_KY=dc4]A75]!.2Z&li/j=_5ga^2`p`<ur.>K5O)T?F`:d5j1palF!7-%%nF]^MWEOJfZ:)8:M&Fgb>-Q(f@CJ@2KsJ4H9]!&#Pe\Fq?OcS@1PY"]l*N$e(3LOl7&e:Qg1%<@qsAOjD\_+=h?X]J`A1P`K_[U%r"I7f78Ma#Utb<$Pe!E&'e\:_]^YO\rr4kZq8$(<!W(.=JNAnE3*b;:\_:HCSKd>J2V3.L`cWci8A(++`lE>HV>5oW[gkpkNK1Fp%@6#sbPRCcF;Kk3JTs3LaZ<?jabP$:jdm):u:n[PsFoUBaXW4A`R<j2Wi"n!eZ%QJoG(2h1rRo_L[a>$Co'P!+Y6U8lre68#X8[fg%H`R."X,f!A+/ik"q]!./V\(BnUMWj-_<FI[Q(IZd8WAK$d7Lpfrc)O:qsC102h-PK5QMML3W./+Eq4?&:]?2S1-qrgl>Y0Xb_A8?%q!jiQ2Q-UuYl11m*$2d$G7Qp1m-pAoQhO`+s.fG@mu>s5nI*Zl]!1hc#mK)3rpFs<PQ/>.s7Q1`&G(Z9Xq^45-_>gun+#hkm_\D,%G7I[4Oa$k/4o8sf?`0hOjj&/@SG=o=5!)pgfDM4`,@3D*S6*9cIds28*CC%o:(f&j0E(Ee__8^3\*3@/:F;9Go=b+Qs,:<3JsYYr%3unid2<$#LhDos5obO"[e(s!6Bng@%`W,$Ho<n:l#<RRs&T7NspQ\qMfkc=j>!6+srQk?>Bh$UUpBLE/>CYAcT]^fn]_.V+qbJ!q%5<57+Dm(<K(u?q6m]Z;4pjq,qlcfY5.itrX&uVX+h'D\9-b<[<ik/9,e-R4ujfRCnfIH7^A3"fOX8&<8nm"t4rti[uH(I#roC$_"%Nj5GZ03I>>Eh-^qmeE,UHM_*;W>d<r-FWqIL@B1Pd!GpW465SMYO8C)_q+ZuqIY$"*-Amn[\J39l+"0bl0q-V$-Nj_?HUdeHMu<n%Xn@2D)D=6FjSWgS-_B,>^NmAn@fPp$/,NQ*O.f[IDIX[$r:Nk@^P2Sl*ir;H=daA>rab7DV`>lLJ=Sj!5&EO#!*9]_=$@^CJ(e&]%)A^>:lAOR:h!4VJ3K5sNX<1t0-%G:Qj\sPtAA-FW\ah8`XnS]"',rS7=*N4rpJ5c/s%46&++D3X'\RQ!s7#"a8"[R8Z\e5m?grQ\%bC@5KdD=CJ@E8akRd6HI5MX5*9RD-*Gdt-O3A[\7HtZG]WLkpNg/S&.n>_,?It(e^R6"IK(HuSVB+""l12\UY'/G&Po`2ad_qCm&%d.C;7+$;L^pOK_I4SD"O7oOb;`L4l3G[8OUMpO7==1<@MclFgt2Uu<4f;A+S8,)K5*L]%E`H)7L;d53UY"fF-H/!hqgF.Pf`a['e%K;67qXS0KU!o7)@BBd*U>Gge_]].b,nS5KBVN,i6UA*I8O%!;>lG<JNhQNqUf&?!\J"Gq`/uP5CmPDK(jA/f3*qZ!K5@I\X6g8[n%6U[E.0W/tP1&n=>r5,2i'?2E&r+BqrA7=WXUbBrQV"!H7U#6qI/b`:i8p'4HpK$@bH/E/u[dtBRqg2W0W5Oa#op+Z_?(.d!S8o)8%TJh<QIl_Y-f:j5@o$/,];`[%tr,$OE0BAWV)kVUdg4qK7eEiSJra.OjTI,En7Ba@2D/AEGQ_,2o<+u5PW_td`SRHNl@7j[9\nR+4%pRFJ$U^Y=o\CaRP/o#,i^p):fF]7mE4GKqFZt$'5Zu;FOC7&GBF"1,qZ\S+H>c3^gTkZ<^dUbs*m<j@UW9WV*E."R-:.*KX$I`j]%;SK0^Ztte;5BU:`bCUeK]KOuE=1kS/dg[WHH;$A9n?tAOHPc9BD-j*?1*eNKW;pV^L-=Ep2:GiE!5i'k]U:seK[X+D<>G+\]@9R,%Gt#BCCHFB/G8U&0L.E-t3R"^TVsAG1W:I[6=D8nNa&!FCRrf[:&9/d=70^udEYp^0B4:(,(\+RZDcLg0@?kWF'Hio"NB9-E!0B+Y%L/6,lHk0U*VGcQ)<f_Yk4Tt+/g7DgF.oq@\U)mgu>>BUck>WnhCb`d\\pTXl6l=7T@T?_qk*'8,3)hJ<jhC":"jE<Q@/8;&+HYmp%X6W`+gH"m+&>G>k3JJ41f4l4@ITB`gX:!=TXtuC)B@Un2XTK')j6-!%1O:pXb>1n?;fhLsl[68u00SA4a5h$1OOk3'OE$p&fJK5X%kUJi,IK3E&#s_L>FiMXa0^R?Y1IC8_1)Bb[d17:.2*0YQ7OV;^EJJN6>pb>Mg1)m<^($jYYXP6Wdp84f_\3d=]Vp372&Cf==VqA`%0GC\LBLoouKIG_?*AJNeIraE-9U?d'9,OH1.cl*abQ=tWReiUnkKb]M#ur=0f]Ar=\3ZGnA=KfV@@gSM`kT0HP]=4UkT)A#Xn11:%N7cDdj/B)5Ym[/0RfU]ZPGu-_>0_KTNJ]JO\2MeN-lg^g,%+1+S,dOO&^NJTK]M00LjpXQbok=$_8b$$n5*ga!>*+Xa<r$n&[Eap%E?Z]r%#?d(17Pp@>QNRP<t2.'iE]a>MOZ[b'Mm"Yj?tn#(O4.^8<F%16&^?()T^`8)MO:)Q`32VdNlL+[q-W2!<k0gg4KoEFrt=G%i\mDn0LITijb)PM2Z+,j^e`(VI--Pm[2>e'1&(hm#7(S*!Q$2n\Do3O]Q=QX^uFiEN63=E,7jk6?khMNe=o7tTGgM("2>dB1;[HJ%(%,l4Fg[S=DT`0:_6cBCS`_Z05TlYW^NJTnNPfTM@LEs9Do8@la4iEO$%Nkt-[;\36dGDD2qHp2\-n\mE+!"IPjqf&#GhX7'%U),%1(%npRa:`iV:7Bu5h(I"HmC(,q7;b<_<-hc!3lh`f_LQ/\[He/3&-F<_,VH_#u\gj2E\R.*']?mlG*`8OF/=QJ"+o_+[A"_E;iNA%Q3C:t,]$.D#IB/89OM,#n&pZjY*t*Ci\<aPf/=4<8=-l]UGrpj`TT.;J]=EDIhgVZ%F1-C9g0E>EN5gY8McKK^+!N@I-+.b4MJoB%6ue)=S2KK-@lq#-9I/Ai"X,]\RKIK%%)[L\3JVh2KFjYHk&Q<Nd.2_XlSntX#KsrcSs.EU#=:,H11F(<k7DA>,3ElcG;,I#F$r.1%G!Z1\3STX9@#_*KfJm+)!D3ADc=%h;nL1hW\b`lG$QYOnM(1ngNsU]h5-s5A3/o*a8Mue&+N$08%CfD<OC0+skJ66\_8p:pe*o>J%Ihd1H@lOq9!N$'DfY\-FHZ9Y*N%C@7YqR(e?fst),f%%pShK,[CnPIdZga?K)l4TpC+O7\R#!,mel(>@FKs3`[XcKX:q&3/[:G#&%e%!Xlm=Dh^RCR*kDUW>i2AA(^-O)JCMBZA.A&'ej$7J"22NQO8*hug>c>^/5T#uR`2B>qMQ;44aB+q1+L(QoBM&$Y$`[2&YE[Y(<%;(uL(K6RE=a,C/\p%_gc:$/3lKrY@6;?op%9iVr"K:AroKtQ?fK`d!4K^R2RV$3,R/h:@H;gpi!=LZ^K4"*i)UN[?t%iQqk/nFsE%OdqZ&)U4uYN$FU8b1dahj[,g;&Bk]Z*6Ul!]8gE!.16RI+MKYJ7"/q"E6aPb'5I78&fu)njd@rJl13>2YHtXpPLoH,:h+fX",/ql%>YjQMc9^$#C/[<gOB&HpK06uc,V1tE>J^fm]Ls.<ZB0!M#(.[u(iUM]a37"f`!pfN.VKQ/_hB0+c'#a)KUE[<"apQcP8$90,C*)j%`aO8-`Gf*&:Y)9J09SMi72+d#aMO3G).mcMK`N3m?q2ZTHCKRKVCd+mY^)Q;Zj[EE-i%sQ6B4AJ/'=cTeN4WRYpN!)9NXW3@Gi<3%M%5c8+gmFuhBriF"o3*a0-j1*CZut4Vf%[lffP<5T<8!b"+T>B6F'T2=XE&A<udb3#!-K!/N!tD@l"NYh59a)W>lUV:k/;)=OB[t%idU7U#QR;iV-QA<'85o^[j;JK.bk=X8AcrBL/Y9@a4YF$GZVngPVm,,4!ejOXC<Lt5]%I&O^2Q1GanshK8_lr:JE(=dGuruHPNC9%2j(/G]B7F9lc3Nc.V07#)'KET0Y31pPt@rh)bE?d<[b%3jU;E(np/noKoO.rRYN!nrpPYkK<nG4lcB>>S>.\@9gf1hV;YdGn7_s7%0h3b[F@6+IH81.V2+.GB\`.,X^en,T*,L0T>Va4i)TO'.(^`_I(P;b%<2WCuBl$Z+^04H`a(R6V#g-/\-]J]j,RsYQIRkA6(e`ZW%lsX3Fq9VlP>W&=*`(q6p+q,=5/?7Y#/b!AukI);EMOT2sYTdZZ+Ba>_Ru0iA7lR;Qo5sNdMF&<3o.[ui\cSu^i[_dTXG8U3S(;K;%MD,XLVQBjHn&,`F&rfm,bZ+9gg5!ND!tUWXK$bDY_-ol3(!&m55s^@TeM=*ZH`c8o#ddf*k$V5-lUhq1J<ZbLeTA*r.WD@<\hj&I%E60pDCGZF[9!Tba/!-#oN)e%_F^,&77_h*K&YS5%A\tDi(gLjF;VojEKCre=,7D\,XJnS=bVkZ[3_0L,Br%+t#@3=e"oG/#G%W*p%g(Eb6<CaUU6-GSAAa4XsNRhMi:f4pj^\L5W\/ogCoVQq#k#"dsPZoLaG4GfI#16<N_)Q+`N<eFs1$&R#LF#p9A/1tUF1l'S=_@-:%dDo4SGI/X!XF3Bi!//9``OCH)=ljc-hse?2gL9kgZI<W7X?<lsON\kuSb^0%(5]]":m]':8C1`Jg;P5^[fnZfft9Zl?LZ=qWk@<1%4mH]%Ydu\hkV/D;Jg"K-;0.Meh`qR$QS$`V,DD?*@E6$f<p/uX%YNKmk`Q'C/(e.)j$J0j""rhgGe`*4e3T-Uf5e$*1PQ"n\Z+N)%0#:rXVS[dti"0[7Hh:F8K4Bdn#ul+^^oiZ;!eBgX0QQ*_.EI+#n9rQRR=M[o6"P$i=^-^!%-*jp#MC,sPhQRmOAI9'""%H,0qR;,%%b#?%-TOoEaE:n+5SXPlC"$4Ue6#N9<&bTMn4Tn87J)kT#_#QJ-.t\)?q=lJ1(-40L^NbYjT>TA.5JX_iCW.7Y6H&=\WV*Ob\]bm%n@uj-RVBM0RVN@7(VmBX_,CAblO*^O;20>?V'ZV'P-M)^qK<Te\E_(o3AOhNAWfOaO/?Vtg$iQ>K^DMU**Ta\)3mp]`dL.A,@%KZ%V2K(aHE6.rW#J[#!6EkGrJ*:U'!M^PFBLdrL_`fgra2\u'kA%5U4TGdl(c0G1;-(:/3EGC=)Of?A_N>"".H.)!G/fU7As+*!23a*%p.$DT2ZFZZfr@*D6hkV>r4G#@!pq,7nio69>CB$BRfG"tEPiI8EnQ2$K2p&cK^XMch%kqf@?jOTaH5,bG4&<JC+om1]H-p#Y1qN6%,$VR/*6.R?0ClCK'#CV!)sBGX(V"8I$mbn)-:6bHKOe@^cjXX(`WobG1ge$\Z-$dP/0XXUpEA\#rr/+J24bJd'!+`t)LRm<#up_?%!2.f3hQ2qRg&jiTBID0@K!RHUg=$Rs+b>XYS7WdpgR0ns"QEKh4G+0p[V%IN3Zb^XC'!nfoMI0W,.rNCHOjTn&#/Ut4GRPSP"HcE%ln"5.?MIpr<-imG,T7;M-7:Fh$j5H*#G&K0m83)h\:t+p!/t!p/u=>g[jCRA:-NYq..6Oio)<#&Yp(Gb$Vm8tAFJbhC?CU3ajg5>%3"<,>KhPmlMh[l8nPT+tZ#Y5"?;95]7]nU2,KqorZH^NOdhpMU.I&FP(rd*<UC8pt%8bWN@ag4/jV%cMOrf]!F<n\BB,^SYorQ<"%9phb4jMo@rR:3<M!!o,3:Z+WJSk[+8_E[@r=./RAXTN6Y>&jm]&<0FO&pPapeF;@923Z!=*L6jr^og54J>C>EQ7J<o*#V0_'&[,a%f<U$R'A32$$u*8FYuXf>oI&t,ao\pCh1TfFMV*InK'mK"b?cMW*r5/A@mS1(d>E\]c1*3@*]HYZ+4*h<;[$ZBe5Wob6;2FnnYk1`%6m'HG)oGG?fkPl?>0mjNR1G)s=cu6@C_a4mDbrm?l6_pLVM`#[l(&,fNa1q]&D_VY=HtoZN?$c.dh<??#?"T2q9b2Ta,gc(c,]Vt%RGAJ4.WZ84U<Vo9SRKn+P@,t^#51ut[o-$(+p,P1A/YM=3K$%QBEKCHSPeZ6oeqJIEC/escF@C77+%S,iOjIl#'eu2WP',kh7:,C%?uDDMRf?Yq@1,_lX0,,j-km<:Ok1KnSbG;0KCV;PR=Q6o@"I+/,ZDqgWPOq+";)aXC,C;\(Z\6m9J2OOU;h`I/2DmIC'HYVnKb"C%1r]Q[K<je'&AY"Wj/*#^0mm5A:cGSoLLLd!3RuF-"?b.$pJ(c#&B1D1PDqI$!?klA'1AZTQWqj9Z>a_:,!^YoG^g[KJa-ET$;\f[%1>P=kUX6NM>01LtBYtLFXQU[,Si!qa?KS74qRIdX1G%+K+!Ks'V@0gIY+XKb)2hXq$B^Gr(8\-.p/tl2]K;\&CbZT4PkUGP[LG+_%'-_e6.e'mXn\V)t5hGecJKb_[2.FZ?ESM!i`(*Od%o2n/;`h-19*6hkVHJ%<rO9>S]&@)IP)DRB4h.X0PouYUVXCj$IL*Z7D`S'9%E6&<59B-6I!!3E;\Vhqq\H(XC@e2qTRqGVc6_>r!94N5SoJ?["-#D?"RYCm-!1J[Nd=K;;KYt!Z%Sp[r,Y[JHoQkI^5dF#;87gtH%FNG(U6\<Mt^s&Zi'L`$W_u!!Zhb0GDju0"bb.)D5/GihDTpGi'</`/;("AQNnM5g3FF@^[3)_P%gD>I4%K.F0S.6)1/3M`X2+sg"%dj@#iOr3EFjO$qD+i7=o.X9m%d21l<nO-8.fDn+'/;gO=AnW/U(:$">Y\77<?$)&4%LMV5OcA%(iUB=aQT$,c%#L+**]=XNY;P/B%$q4Pp%#i#l@Nb.a"rGN3W"mF-J:Dd7CQpmp`r[hr]N>qc4jIIr:(SZ,OZ01*Fp*M;(/rsSDeFD_\]T?gbYG/G5e'gZ!:@^5f]JD0%2h[S%5S$3/U%FlmMoGe,`A0YNiO32r$jA-g"qq+>0u$VLq*p/Scno?/9p$/^0iC@%Yc3emY)2m%ipkjE*9/^n]^b(&JTSKJHlqH#%A.VI@6Kl@h/Y:!F+Zcih%F`bS3mKBF<!\<nJ5d9$k&B5YYIdh78&8VSZHI!b\I0[[OSM9,Bk7cJ\3OM<A0]LN/%8%cKDYlu?XD8Z%O3A0,*!/TOn0'k%F?In$RFlEmkKN,=eJ?knh4DP"k_c(rOYrH)L/TJAoh#Z%N\s)GNKti.i9&-GG'+>;!9!$jDXh[2]TSRqnc&Vs%Va))Nq8do6bK<g/)l?=A&4AG=h'T)$RP>2@J/Gn?()UO&>nXcN/]:Vto"GO?#rMckF]N*rI^O$"L/>Y*.KdS+FW?6j$o;.E109gQ%Y"l^L::_TVR1"4.cd<!3&lphF&Ytg++<5F!>U!7.cFhlQ$*Bs=3e0"/NsmWrqD,j-W:'bMlo+=&2aij:&@`4J!qE&\N#3?77"-:=%etY"RJ@&dP%ALJGM"-B3T^-*HZ8D[`hXJ`D(kF8^L1_W71/LVS)h(S6,F6nhPn[T5gn3>S[@rkK-09(I_VE#Rgh&tc':R"D*:7fa%$jMZtiE_kn2mj8eWXtraV",du>R/)9N%bpF6LY,=2TJiLGs>CsSZ$@/fFJPF(kFEK"c/Mr(+!Dp-[]p[$Nm,;K/5?:Y<?eo)_L,O%-Y6E.X36=I(t'j0=@\3DOD%,+LA]7L(6GtJ_J;4!!--6B/6P")o_`=M73ou;c=M9D)l$tV9Fg/AeraR-Jm&\@>^^Qp!K6LGXMa7)%NV&q7g.fO,p6SrU6QA1IEDTVF).(lKn`sBM(OuPFYhQT?k%lDGPp"L`WImi<5S,N7QJY`iH15N:F<Jd/5_sSTD!3*daC_6GK3Uu`%Y0*3H#feYdlqF%g9,qEk9Zj?JI&mG,(JLs+qZVL.OWua+hrUW4<nEY5V\OmCF;8Z;+^mi<g4@rd2J@\=;ZO')p[YBE5u-BFl6V:Q%#sOb8"VARQFRHY9%L^,t0KT;t.gL'ZL9`!FJg`6S%,3LQR?VI1W;-.`S?f9d2J/EY5^d=;/!(\0nkR+$YY84ko&h>Sq;DYP!TM5P%Bg,oo`*b@/A0QiSdUA'@kfAa,GlIoB<c$7$B-P$lX\IPl[2d1G%>LX^>\T#8<_Za6?,?=p#2^kE3ea=/iO4:n16Cg`ZP[KJ8nQl;%^5gF'V[?*@J1b@tke8NDr"8gtkNe?s>)\*H>tF3NN?VS#RiE'l0Y&mTR%;HC7q->9SK``dejW-TF&`YX*/5GqpouAP!sKJp"<7EB%FYG&!a=sImK>f&1]VY</(u;b/g0qC7A]PSd,lpK:"b_>R!+9u^VD@%#GnThO1:nIFU[8(0pGu<NMDpW`X]Aer2.BUN8ZoH`D<(oO%Q#a8,NIVkc=B[KJbE&T:L&!d89I,CV'k@UE$dY,Cf>WlDg_djNi!0ub)p$f1`XnoPJ#"efKbZ1^)s<nO:;eHp"T[ec'DEZ-(Z8/2%+^uOhDIkZtBVMh\*7b:?AKi?brYe=F89@`j/cqV8!<Rp7R=LA?!Km,u2+iD84-N+hS1,XL_Hc(^bt94VS;0d^UnQ0&N>(l^0q;1>%)UPr4iLEeg!&HH%Y!s4]!A-X4`f%6.,S!_$eE/.$=@)+5\Kg,K^_7@c:sUWqd[BAh#_`[SlP'jE<?2(&P:?im:&Dg3fdP&)5d=qn%f3$/a"Kk.!Pqf%#mQ.ZhTl+CIeMmqO+HR+82,6nO\doqoA0&<[n.V]=68ub9&4]BS84GuONBgE!hLR\He,i$(RI,g:#.=S"k:obb%Katp-$.=-_!>AY[QHD94*u,p89.r@A:Jq7hF3<+'kPM&a36MU45KGqH)W;WZ"q1N-V+U9&>#0[q%*ei6F'PXq0.]Ig-[q%S">Dg`%/>tOQMrK@-.:A8JcKKqf!<5/_TT"^oZaPIg'E'^[$BWaTIDUj'OD'Sp7j`mMdN,W5W_RnP$@aJGFY:aD$A]>1!MRAb>[BmY81%oG%U^5oW;(a5,hphSb:?cPId&=bsdr%S=AJMRi-7DUTH7,'KO=-t47/gd\*c"T05;n'6hG>Ema@_!0_P9FXpaG<k^6%1^BCSU^JhSdE%56RCrS`N48G9?HXJ?"dJ1N"eb*@\0;_%B^Z#d`^]CM;KH_%hd.YA'++b3/)MXTc2)7Jq.4.-hl?9XJ29L=,TIPg!SO"*TUM+65^B%bHU=T+B$!o+"2*"dRXS8YCu[<_WW@WJhdd/5fao672#0VjX#8[1pekr>+#m1R+>9dCOk1O`/O1S8kmTm)Y%@d.ZIHsUup"tpXq!(%Asl0?[@nV=(24:n]T"#aaa`T.0gr[8-4L</i007=$VdIgVd(:7^t$Nl7OR2Xa62^@"lba?UQ1.N(W=-06U8H@!QfLO9*g.O"/93t%G$bDg,6V-RGdoM.6?.,/:J="egfBK!XI6fb:pIm9!mV#Vl;02K/FeP<q"Zh?/8gtd2&&eN3Yl3;G=1ARV#?Tt`m.YOZ=F6-2kC=U%[8<AB!(4SciAg',Ps'^5HNt+Ns%!Y*cdC2lUo#;,Mr'n6_<AuC$q-gkdV_NpQ,6r>V$]gnC.rL7(,H)HBjHb,!)YgMh^^Sdl=$o;%!lX%'Bou;HI8AXeenWB#$I_,pVhd=T$%VYM('7N3CLGph0WK]\ZC\>Nio.bkTF1iG56i<+.rE'd7OU(>)jq.j7kqUC+gQp]XZ?6_%+!#RAiZgL!gP72d%(<N9SLQQ4h[f5B6QG8RS=I,$4Gi_SPmTs77(/+QDj6\I,Uh3!iRp%R!MJn@7ftNR@o]gBX^WP;<ou+;EKbcC%W'$hlim#7Y;NRm+O1Wu"/m'7C,:>"9AC6_m`(1FKA3jAR,2Ib\KMu#GJufJ!bfA^)=`=uXT(3.UD\.oOjN]7>!+eJ9*M,Olj9Il;%E>-QoTD=','YHiVW]ZBWQc(@l!-/3V!hoN!%_r,6;f3Vj(PdZBVT57XA[&[p#n6,($ZlD(CWg8offS^nV!bM=#7F3<ED4_8\l)oL%%$i>)^3FJca#R=FhT?u'M7j@.^u[ag[+8*[6%Sad[['=>LM*ccNFh,:5YIb9!aKGa9u[\!`S`,pboF:bQiXrJ17!_0U(Z[Xr1u'/%Z]r[q#SBSP;Wn+F]<#oZeE'u#ndcQNN<#*%%B:"bV1[44Vh\,`%'Gc*%Qp2#*\(p\=90GD7mN;H#eWM-#('E#")W,pemO=7/8PC:%^se]BbTa!EMmu1.PpK^6O&A#4W"moi-82\q"iaGq"D+ab.]L!51Mq//r!!/tP5q8f6G,dN-FAJNp)m+$$_Nj;Dj:;DLolCb!HL'F%ScS^c8Kq&_;@sG'FAd,q?qEb&Iq.@*9L,bJ,H)'fMd\5JX0_K;U(KmGh@_3<BYZp5Aq6c2;qT'j>UrU6%L;?/LlH."X[nVr`&)K[%PZ!p#**'6g_eh@S"`0WR<*]rU\RK#_A\idridB+H:n.(T[inP25%5e^dW.f3Kj;R3VbjG$6sac_9/DjJMOLr1<a#l"_ZlfI%Jc_h%bf!`?/uhC\p;+jOAjos8qQHZFaGSDD<DIDGelOX!$O*(-AludXH<ns]io,c?6-YCt!(J!Cq`&tGnHM(UC%\Ug7jC*g<@'`GTI][F%D$bj)ee7d_Y=OR0T7/#\f#iOIF5:!X4@:nScDd)`2^"\@A,td/@ps?>2(Y7Jpjt>JenUKhhL$DcD40jMarP:O!L5:#6!]i,b/P'q%k'<H=R@A28"_F[Wp*sYNR4_;NWWKf*&0N*9/sZhf5ch,%*8A8WWpm@U9*Yteoa\JlOkC"2>6QOr^b0&$;)oH^)I"Op?</3*U?W8F%N9XEoCQr?NQFo\(2`2[?8-L>OO,&=L)pq=E[4"X45SWHpNIGBhQp!oWJl=f>[Bq)cb-T#JW=-TWin<A-0ePU909e/ZQO:f052CP`%Tgr*6_I6Rllt9s[n1g_6@fC2i!2A'_8n3U&f6kZ@dBEfdZkNM&Ar;d[IM^df<86>a<Xk#=j\uB#oM6#ER6T"*L"hWJSZ$=Ud_GkK%X="0EZ>F5V)N5uhBg(<;1NrS5QkZ;f*Bd$ZLHn(KX+t>6YOohK?,7Cs<WX6__KX29Qm_i(,.Bj\a$Z#1h.fT^&edN)&U8tW,gU"0%!9+j2XEiVk(I+W78ASFUPDG1L^uGlB_f1cY;"J^.IYNAP'ps)r`HuB+60"6fa65&sURbia$m>$PlYmOG66M3/$mZC**4o[:JXBR6%M_JG$[gde*VL3OC'Xeo>!3AU;%Hn%Q%,R$2)DMlie*ORFr<!UCl?$(Nig:&T]=+b1=dec:1K1V9D&`DkX#7enR>,+lT1%&UFEhsn%8bMkB#pF<IK:/8h?A35:f%S39d(?Kdnpa&JWBo+d[0)LiGYD`o$#Mo.+UV]-6rAV=.5q68V-/Otn[Zq;P.O2+M"BD2]$M%+2:jJY%r)StN6aJDQc-.gbMf-e!Lq%<\=,kE=4t-eLCEu1!F\3N;]g6.fD-5>?%93Te>2<;8%AI:TT'7dq63m`m(JV#"I#RnU)I(#/2p_A#%"P>0R#3V8J0/N!WB4We'6l)OYLG4`I,Y7&AMJF)b`3TOFc1Et>"1(2l0qF>Y(p.\-EtY+34AHdY>)Z!;N\mbNX3IIE&J;:a9FctP%P*,u?Yr8D#PpO2?>E"nSm7N<J"`4n.L!<([djJG+kU64)X[.+J_)\6VHZPU>9G<GaAP"miT`l5^`Qh_*ek5aO6J2,8hoq<9L?,!l%i0pH@Y4;'5.<OM@TsFP4i<M81"<CV@M<*6=6m\<,+Dm*eIgXNU+;/sjgbN\ddOGl[+=-P)5cITL,qKcn5opJ`e7djWlnq%q]`qoe%6D(ECUJbn%W^(E7b=XdLN(&$pUXkM<X;XP4KF4s)pLr'LcOM[CbR'F!.5@P(9B6Pu7jXi0FVu3TTYN1Dmn1ZRks8hi^ZWRFcq"HO%X>-X8-,j1r/YZr7KM]-DZQ%uF5nLAdK`S!$C"E@uZKIdY=hehY6>aSl"ihB\@lb9:RFSs0BX4Ks)Kf-JLkLR=':33jMDQHX0a>MS%GUDn[_IE+MD,^KA[8=<;aAH6(dD,#_o*J!,EKitOg]A73T[<`tb:ueReb(Jt`4tCE8%lXU.Zf-Fp6@*8/qPB'bmuh@ZjskQ(iMs<%Z;=Xu_jFhWQ<(ee8?D";0%=Jn`KJr093A3IAE][;$Eu!`$n1q<?ONM2&[\KiIK5VK)QaRE[s*fe,/oHTF,6sF?q;,q">D<0cE_U!%&1d0S66edW,0:sM(,i(^UpTI#_5^(8ekRFq6gVStZ9(BVHW3g^#^=+l%cm=[b6<h_*EX`=/Wf+NHo/!ik&*kh#n$0!Ff!`"TJNDY%Q%'c0%@#'bC)<tXKr>G'.S.s-cQqou'2HRBdTRV3+"/t#4p@D!gJB)^\?F:o[?d$Y&CUAD"j<^2!iRO+>B:0A@h[:CV&LY?e<pib%N$#nbL&k_#3HIh4Bu]t\e>.u)8UD5df4D:CKQZW*PLT&P"<S&[WJ8g+E,;jXQ.Q`E/A5Vo*XU:jh.Vo4T&`QbE=0LK^bjL);59,T%$.c)uSn(IiKMW#N%++#CXgg'"9-Rmo!G$UrMeB:+,['[Z/OEWt/<,Ht<jA]'ntW"Jg8TQ4$ADDWaL,U`5I0iA(d;==5e%59,8j^^%QN1K3p]Q3_"iVcse&Vc'\iW.t;5q(M&u6O.>H'qa&Nma_YCPmFF<-4PDX>^e'M#?]b`h^NF:&0e:QdJr*#P)EOWi3g"9<WkbfPd^%`0sHG:h":!lt?J1VK^0+P%\.e0Y)a+IE8A!B_;Rl5/U:<nO8/S;#/R<cD$%7mV3HU[9ZYt<M0O5c0<ea$lKVf:<Kc!E"i_[7'8/A%f%@\P0pSKL-<Sei,\ECIk\8J8:JdI3.;#s<!-(E^cC1.Hg'>p;9pRfnc`hR!.KdS9.7gJ"[mU5fBeVmn+M)C3g$q'r-37$A8h3M?%7L7:2DZdVT3]fDLbQ.HITFF[>Lf&%8(mT9^Y\SRuQ4I.-:2+UE$*7=@5a_4E!893n*91fW@)/3+*;DO^=Q]"mcKkO5_+%j=A3W04%aZq7X$H6+lV-4N4f!r/t#&%XUa"REm+G1`EmU)fTc%J\s+-&X]S<2WF9L"4DVh8A?BVl0O.h"m$"ubRt;X6W5HoQ1@Z,hod::;d]%bjmgrEstKgO`n.(jO'K][M%#j!,7%#7Q+&hZT@:8Z"+)mfb:dTQP!%SB6m3,##L:n])G&nH^t+q!3GG-Po>\`Q;>nt*lT\pJ6H.n%3eNQg#M,H8R04A!`u54^D.%;o!Z!Vu\,c%bO]^Zh6NR8Md.2_L'gsPqFY*]RdF,h9a1=0@7[3u`C,0RE"o/bX%&sc#32:d'M"h1S%&=m.JF4$a,\h`ht1A9ItW!`hg]WaKJ-B]Y[PtnN8RPa<f,gj[OS3Vh4^dg+3!,Gas2X1;#;:+KWNQ75L2kp)%rH9/qIR<#1'A-Eo%IB*!l4!)&6qt)KEmUcmi/G"^[\g^5Q'"%^ZD/m*UA=^#WCfAqqlO8m%[-!B7k$qd8:m6-!.>2O1fdJMO[\aad@;Yjq.B*>NeW#b1%^jM?]AG&^/1`NS/UKZ-Bfn'R(/@Mr$?MZfm%V]ij01f5V=qXiFHjG$tClKiF;B70%)ke]D$A"''1^7_qnSh(%9Ks(%+u4[kclL.p%!,J7.SE]TNS*-:CKQmXp>C]EU3n,K5JK'Dq=XW$r^+2Gm"k<moSm]Ce!8SfKAKE(_#s0jB@Yt.2(=*M*Ef)FNelpDMf"At.D0c;*%[qfi,?*P>OKJ"^3Xb,.F/+5_EqO1/L8tO.'N[fG`I'kU7MPs;30QQGU.46B#Bn"PA$1TLiE0ZU&#cj[VgSj->B]:s.;@]r5T+hO*%&()!M;Y2:S=gnrA/eUj5S0Sa[:L+n35b:V"(3`9Aeq9N*@&MQ3BCW*XGcscGMGmb!C0q2q$B6<VA1Kd*>'+9+"s@'Bo]GLM"_<,g%"\HRMNj7-#@kXT&Y9CbRJ^3U]>YM4n"0@\'L'NmdFDEbhV<A2e(6DOL@#(+WE!1.`We%RC.L&DHHnlP0HU52U`@.Ks#Q9cO$sFON%G<iHj;"n%04d=0_M&6A'Fc]mBhi-*Q4[d2D4d6<HQod+NJ_no=cD8#TR."9AG%VGNUom9-3qdVhVFX30*$V2'JZNQ!;Oj^C(L0EV%C^<r'`&&(b%-A)gPUcr?<;K^6<W27i($ijR%>/3'9s/%CJHrd87rDXq3FJg%!B3Q!+N+7[_u<T3ZH?Ea)_QS5-:h(26p!pJ!^\N3%.4/Y7#KWceE$\Kqju-e;[9!@h,I2qEANDa%/P:&"M)0+i-4)o6pAgB$H26u>nlgA=`L2';WLoK)1deZA,T&DbJd73&Ab[1D[L/-h%[+ZQ_p6)kZiC+#6apLIk31gsHJX+af<n@sO:@0TbS7g,4bgm!"CQuL:oW@mX[(sZ+"+:b$!efs-7q$!pZ@^etF,u=]^p7cWClEeH%!/X]miD(ZW@I_XT,&,4*HLI>pIY!DT,7BDY^N`RIMBkKS5[HWN]4mLh<SX!nl,'`DR0XhoH'HMgp;:\,MU.Z]H85lhl&Ai>UQFh2%d0jSBB-ot="Ao`iX`d903ajp7k7Y+IaFj"T>9b:QV6[Aj(6tIdGW%[8)](m!>GL,,*%7F$\kO#Wnj@q#*MmG"^uu(qa/PH/@S%\m%pf^9"ZCp0o$;>JmJlr]d!qYJfV5C1;5*B_U%gSuL4-(H=[:c#SP#qh7`?H>5;>GS?a^s-$!TRg3#6cAV74'lKlo>)3*PaFmq[Fo1%+Bap4,6@Y_cir7W+^%2B1k8!6VF3"ea%U1SL#PMH=Cec].C);@E3?<;mt::`bTG^WZP;a1TWAO1@uOh/;k84m%W_ctZX#$)*iC2^%I3\oW^".FR`77'ef9eMt+]1?H3Nf,:oa2DnS@XaH2ZGC*#s-4ZoPG\/%TrA=>8dqnUlk1b,M48c1jMQ-BL+5e&f^WF`2oS#A`SB;%fL/ATBFO"fQLS)<,suT`*iRP)F;>(XDlPh>BT\u,RCQEH"W;?"P&b]bMdT?QA<GZI!W*D1TOquj&5iX:YWN@/VdgI\M?5R[LC"qR%?l:M7@K`R,HKA0r[Z^qFPl%111'#L4M))%Ya`%a$%8KhBQ-3($&<OBGC;&_9M57@WTiM4+1V!ME^l#r76p,KbP[O7lh6r<LK#(s1%.>e+-SMNIMg,/'0;&!jjJ>i-Q_.R`tKX;%Oci6ih!M0s_G&7P5J;#lr/'Wu$fUc+NU2uSgksLr#8rOr^nOu>:phrdWn%K6&3B.Hp%AqP69/-u'jSa@rjGjqdrjjK?;/)js7g^R.r/!i10(udIoZcXXn_e%/AP,;#LS[9_`(n&`A8rJM!6O3bjQu*$V%j@tgM<0OCkUlmC%;HSE:?-r:\Ol5<0p!]"iO\V'*VRAPJGjDUVOKT2o-V,L*H@-@2Ydpr.&5B:5PXa7""a.[XbXLmj+?4W9"V:Yka.su_79D4NOp,7$%G*Q(l62aqT/[EbC9HnIfT1+$=fIu#p<Jh*=O2RJV3UV.#c\dD;Ch/s3-J%Z?.aN\I5BN/#D'u))R\'g*&;)]j:(9EApE_[#!U)%!%$ecqBWUs6ndah]:T?&de^n1%tA<h83VHCRRdGp;rA=[-7`OobC6H-c1[.;6\F,rp5C(E"7K+N>hq@Lp.JB(oDI$=iff2RcO,'\nl%3X<l-bRhXN8&Pq\'(?!_9``?OG@tWu0gJN(VeaU:fT(s:"$mB$Z<2^k<t3r^N>CW<jc:i6<Dl7In:BR1%B;e=PXGC:b"P]9-f5V;%:5T2(2@2k(YhXRefHpD\NH/UXE]iUYd&@[A8^LnYUJ<`KW@B4DC<?eXA%//m7G=_b)I1_F'i`:Ac9X%$lt>0GK,cQi<8sibLX3b0%;C2O@>C'48qGUIGfnbU*,g?NbddWt5L-E,-.DW1Q!2(\K<<26\NCRV;?YQbnJV"gA*M+d^(2/up$e4*F';`i@SHDgKUQlBEIm_</%.9Di"07YIZJnMJ\?0mAbT@gM;p):a^7nq/5eZhI1NnDuCe"8Qq[6W[L_7LDG1bA_78>*-LQ-Tt3gSBFHCe9/RB5DJP</ib7B)7`K%nBhL3<,"t!m^0;X5V]-FOJE2&<JgPc>f0l`:L\]Km^<-0^<skCW5WbWUSmY+_BRWK^/9J!*ZZ_'>.2id^ac1iJD*hZc9X9nrF*G#%a%ELY[e7kkXMq"rX,#/G.d/oS=a:uj)rIDABI8WA2E+E8*IIQk9EIp6/@Q"uUm;G,_mpL6qZ,pNdF9C[g]GV?+GUu:!j'W21oucC%0JX^!6nl.^[,V5Rd%$hi\>JS&IKd=EPJ/]ShT)*1Z=O8.a!\.O(EXI;&;J2T]Oks];3F>_?"luE6d/IY+jmWZ.Tn6A!rJ4k]SIkV%!)tXF6#nLW_/8*Ao>Gbe'a823b0Gbt"FNTZ#H+Fnj#(uM6n7Gj'cD7Flp?3r0R##[Bb8GQ#b_2bT>r3oY-V]a#s(9UI:#5n$JQGO%#@=IZG#llu1k2f2?.#k5dM#oerfL@kMM=3(o`Qe,#?rG0nj&>e:7gigeSDAm-!@+G8g0<5/=H+;<([::5TjD>8q@'i23Rk^ec;N2%)NeF*6T73lPST7jlD.t.mta:&BT;TVnBGLZgT4@_S&N0'7kG,6UA'C/8_($`9S(T$VH6m]gh9@rbM#c467a@:@AuquK5&P4Nt'V>%.X4$Y@600J_/TQp!o5pq)L%GgdFso0IFVd4=u@o_i_6Fe[:i_fZ^=B_Obb7(CSLqTl))OeFS2Tt'e2#.jY3Qk2)6qHjN3KOB@P8T%3sU>tH'[nX_O_8*8lZ]Tok,T[-bO7q_dLj4JIJUf`-&.f$CkS%^8o)I3eRu%=R@>g$%re2(flj"Qi]#a3CFE9P?M]Gc#(6DEGSBX%]:<&a"]>fp`f.>ErXL?4SCQ5b'jOQ?#H)Zu^`G3Ao8R;e!CB"2+B%8S=JIL."W7*Od4k&!h8p<LPBha!l[4EL:iW",@g:YCk_S;a%Tuu'j+r,apV1N%e[dE.V*GVF12hhC;*?k&t\*u96aIko/SKJVuo;pD-VBiSnX5D;s[ocEp=RB+1?Rb,153.uRO&7NCrW$%n]S0[.%(ND8>CLJ/@Aj\ltAnmD>,phcZb6*\s-@c=AO%_C=%Ys-ZCcWIW)(VGHgTdK5j4t9,&3>/KmLb1mV%AY]TEDO4Q1u2tpL`?^&U;Do%nh,7)?EiKreJEd87?gAFp5AN*r4'>/!4n,_"!h@YI'>dq.oDJ?_(2i$<C1A3#bI;r<??S/Mi-DnZ,Rk*DW__Kjrh!&,fn=c+nQ%_%aJAEZGWKn#]"qU%Eha[;JMZAOi84Z[rsZ.FLB0dd`)nIElo798k$Wj^'p:_<,nkf+miS,=[1hMA8-O!4bCPOq<ao,3Wt#<OHa+)V%?NMBZC`U60aE@k0.R8USTQ>W.e,CKuJ>Ri"I?`g^5-NHf,g8%SL(mDd5aU/uJN]7&(C[#hNuIHic-e$MF;X+.au0G,&jVp*IFm1\%*?eg`j6=MnMnV9Cj4Q.AZXlL^,So'J<Y0Vr+A71UK`ed'O>bds>J1q`OG`l7.D:81@1_c?N\P(a.ehSQMtt?ME9PPE#AjJd!X#/*%)m&Ph?t'2SFBUpJW.9ODjVX(1%VWqVkD!)jD&jbcM@ONlD%=6Tei<H&$DpIC(kCl]^1kahVX6aL":>cA09(iG+Z=\9X&2L4X=iEq%IG2RPBO^%WC=LGBjMj(Y19EWKG?&sk4D'+#XYs"Q4<X!i:(XP]NqN%,(U<`8@Z&;a+cHs5P,cC?D.Ue@XNCc%PnM-"FX=F!BJ"+T%FCf\I"\H:__RN+b8BOnhe<oeG1E8A&9)fC'kfXII.="pWRkiAu/1=""5;h+JA>c6COt!uf>f*=dL(HCMb=EsFkW^'V5%.kVg4pS?%K)dpp*Z9#qO'8fW<%EKR_AHt6dH7T^(U-\%?q*6BhJqm]?oF\c#f.e6AHT/a3o/;a^JbXE?3T.HR_^s:7XuaJ?Ic=d$Wk\q<U;hT%R#`46JCRuMLEh]W;0E@o]V#`;&1[8BC`XD>P8aq7"d1O2)79th9^sV]"8&djRqYnoq9I((6,(.NP6%MA#rtQ9NK%O_YaGV:?'OW2%/oFA(?l#qE(H46KkWrC3rP3i@Dd$q]V>M1=/p3.*bDYsZ9rL_>/[W:taG0+BWYJjDCqH@N+tU;,KLnsiYZMjJbh>%%&6)G!Wre7E%'mq0>qt\W]Bser/UN=Xo!-qCRD%QhRe?\gWXV.)<H"l2B(kBVV"D/-$,0$cD^F]h$7!ND6`t1q"&AM;I8jt44%K^FTNL'Nn$,9?j%`Ammdqg\\PlL^$<WH>lVeu3a3U*#633,N<-87QDNkCVa$QK\T_;.=$N[6UC`'G^:kG1@LnFe'GPZ%fanM/(&T#M$sY![<L",@`%N%[Od`9K$Z#mLkd>h5E2C8]L12p94nLLA?'e]qC&d,7d`K)h8cIC^1Deg,Sb9f"s*-+AqB#M)BlAj<&"qE,QA?V[&Rmt9Xhhih5[/&%e%\DOMT3fE,66t-%*(!C.?2`(aH'd&2IRXGeu;k9!3o8`fBR%D,=UBS$"/us`_[]VAE#^bbju8036m8\2Vee'f"tD6HG!eRYadMr%4C+E>-VgoS*+naG+K^UVdR1QhT<fqcEb=XDD(hhKd2<S`5$KBQ>rB2Hs3VIBq/YO+b;5b?dIb)_"B,g^h`#()CH7"9KcPMo=/N/G%':"CtpgtdYnsW/_7$M\2gJ]\r)`PIY$X9K<FjZpQ0koL=DW@tD^et/[1(]Le-^%2K^+RibKWaErqC.ZcgcV`?ri.@W5dW92S.%ff%M*oo/!W'6V5QeG1k("qemu!\$K?^>Q'^!#hndb_aCBrWA0@&SdJY4rsiW5.ZkYu2+c[`B7(d\GTrQCenm)*!b%^LmN<nJd1\W)n3%3.W&@Uoa/17r780h.@&[7be`<5.Io$&7B":>-rI+J>=GJ1j1*a$Q/91#6!7,7Kutk!#72V#s1tUC^/X5l?03mg$F2\H=.LH8/`c\%`,t\<a(nQ/!0@U*e@M=#"X2sf1"ZJ%AH/,sNtXsQ0OT!W/[I%;$rbGhP;/7NZ`TAPh/S`IV8ad2Gg<3PDBKFS.E.1oj!2@O0HG^4%;s"F+%@fTD9^;n:#,Pb%!BqN0aXMt="k`,pmN(/1:]V69;Gb4c]%K_H`&*:G.W.dT;%]$-H)[PRbRml[f6`3=YRSm<QmFM<ZsG%+%W0]hB4pb&R;J;_aP30P0&b8n:WDA<k*n<NEOA<K[3!Ot.@E^,tA`4,`P>Hi4_NY(#PCPM&6Akg_fud\rf$teF]$jb9^mGV$9!U`4%Nd*63#W0gJ5YD<1:/p?qI`1;,^hQVi.%]:IUO]TF.'S-2F<8)T<0MtU>(I\)>>])$<&Tn.UkrbYDo/0+n]$ALK;DSR8n(bH7DLtH%(Q8;MKX=V:(YCBrbH04]-^sq#_dF](XJd=;;CR$h0q!ZGKj`"l4%KHk'NPo7ZMc">\Pg+EZFOUu[7jR$[_c;QnOe+':8>iY'9u&t%/8(PuiNgX[Z"X\V<li^E0il5,-D&@mCP`qNL=K2fX4<>K`'-HQX_@GjSi3%aJlY@jK0.$q[lI8Pd8;TuL9G;kc5NG=h=UfufESo]%Ee0MZ7g^S1)cq)I92gKbC;j`d-Y2@>+u8%qqMPfI+IP#`R2S`HiQr<bSPrI?G[i1UJ;A&#H9+6MeMDk8)I!5gQOnp<:N&\-!O<k'%,7kfKa[%NZ_\7e>EKh$(?LX\d/eb4Wih9UHSkY7=6+96ES_eUOLS8p^"Z0PL@#V2j4__^26-<C[l2]\]i`YU_.gm[H>no5WX())H%8da`<nV@9F!XF-gAtsHsOEIHUFHs9.Td`mGf`n@6nZ\+LjY_90alpflL9h1I1t&$b-d>NrC+]]mE&>?)_=TcT/PL1dVr@gZ^[[hm%4W4buA3fDgLIVM"h+feAZ2l+DZ9ED"]u&Edets2h46hECk"PtO1-pk./M^%d-BbEPC)K?,L9]lOZN*Os?KEi=HLXH4=X)Rol;e+X%AgA\GJu,^GAXnsS]c:$\o?M/]:f*:L2W6XkNG$l$IDf'>q7<##A+Q+E'5_7:NflOlCdM)D^B#JQg5s6l_XqWh`Ccjb<h9mg-R;7&%Q(-u0"Q!lp;rQjJ]HEZk`I:U5[&._^n<tt-Ga!4#Js6Cl\rr>hn^4T]cfE\QN6?;)a$sVS;GFXHBI4>:"gF"+Vtig;N)ihjR3N:i%"'Zf:O<>A+<m"#EfO.C9%'#/JOKS2LD:GjL>'=:TX>2IXE6OQuA0c>$T[==@7^,=hqOfa,4IfsmGdQ:\AX>CKOknPLBcH>_?!1iZ%oYNeF#V\6eK=,1Um'f`pPUqZDdlZb[.+c\8d>SV+1Fm=lb_Mi]`K"%n=D*SSM7:YJDV.Qs0\DI@ANKmhB(@MG-[2XrlWl.iQ<j*h%Vb)<77ofo9(c!rk1+95QrlUVi'I$b/Vqs'OfT7d5U4@q(bo:dn_Nm)[)+-g$:ZB/@n^(*3Bh"`<=P_[RFW$nmD3J`W]^b>[ZinZp%-3e5t^dOj*DKAo.qoFg8$i>i`Tk>hg6HMN#&.d>qquK.?N'eXg,$1!O5U=sFKdLm`Rj="n><pj:L0ks<3%=$9'=D#gD.^bu)[Su@%)Nt`Z<E^V/MXa@R#MKgAg,WAL]ru:iT5_WE!b70R=b$N4dj^GP@;3VB'M\m#dDu>J`%*Vuap3*D36e8g/<d3Tcsl*R$qVg@\#VA0%(kqC:<lUr"DRPJ,KD]X]C/>$.Uf43BlGGb%&eI'0W\pDId=+'gUc&/X`PamR\CQ)tHl$6I2%5KWApo)g0LR/Z5S'#5:#c'oF@Ha,%RTA\^qhd>OPoA.+g/3_dP1lA]CtCpbo/:01Ki.V97s%/Vi*+l(:4rGDU-)Q_&3G=scrl/i4j9\N*Cc\+>c%"h=eG!00A=g[#/d]g%edg?2OQBr(1MR.7bTO7c^pX(boMcL>*98:fk'</J&;jh+8=4EXP;fR`XW#XZFZss.Id&)/^]M/[Qr'IblDi_fZa"3VC19MB3_MtY%SYHN1;q%-^kZ(\,g!@6W'N-nD9X#KG*ZZa7TFE/^I*FkEEhle^C2FqM>,.eFh]YHT(K"GB=F`"qYoO=pMWt\rQ@sp9YE&G8ba#3W%jE+I\.,iISCM.M3UNeBhce_lEPb-?Um<(L3<H2:a`6B!EQq90I#M5E?8ja\W1n*098*CCfqH#C>au7&\oTeJp,h6+##>11*@?4*^%cK$^&m3,o.#_Z2K_D&IE$#,dOO7o-E]*,F=31mlM.s'C#8A'q%TWMJPE-\knV)c_64+Ql>9)$Q2N#7C6?Y@LjZ'9*H/+\#JSQ$P9%SP<"N*ZjDp`_tT]Ga("4Z$[^!9V[qfE<Hlh1gHK@Ne9sO]MtCG8aHlm;o3nBq<GcJ^Pre6%(`1U':mL8P3RuZrlnnaj&s@JJh?B"%alRlBoXLjf[#4V+Nth5C9gK@J>,^i$PcI%.d`A4r]c-6.W\`k,XEYFWE&7fFo_;lIZ]2DOAt2\G@V29Qo"&ErJnIf7H/t?93$_0-%r=YFt`.C?Rq6W6jq&u.aGC5`-YIV?f<E0%;g`gPs>_G)?;VPV9a("6>H?Z[2d9qgALhph^'sFXF`u\LhlYB1IS,aokKJFJ-%D__i%1j32qbRrJda>_[j=obSi4GQOip;fqTBf..BGZ.f.J>`LU0qMLFBLg-87"LQdL^dIH=55Mr4S&"n<^8o:*B;-oF;5b5f#Gr^)&q6L%]'DD2o@h^16d$7XjU5V7,)MCq!VGHR;`%^Z!^QRLd0:=/gost)s6*ml&p676d9d>s@p3QrZ=PC+b$jB#7j"jqDkjctpRU-@;l?Bu%aEF..PApd2%&83k:Q\Wff1MgPaQtQhMBMd:[pE1ui55f*-OUR(:"ZaeE34CfPi)hpZA3?R=!EWO/3FW!)EDWM3W`6[_Ulf4<_.<a%ZqU>9I>ud#JXWRR#&?e'MC11_KK493.`#Baajj$q5$0mSk#k$=@[A6[Seeb"E&ZK!A<3.)lll[[ZM/IoQfP5XDc0t".9R5&^h/%;%>t/%N22`E[D,qm(g',Lt;+T_XJI^It[9P4QlBC=j?>%i`S7>:g2'%#rgVD(]f?BjaX(7,>Et)5u.7OM1,cAB0*54rNK_^=;'EsCG%2V6Z"Z7GNsoZ"Ie=$Z&HX^l!EOmR`HN2&l,!1)R<B4#XJM%K)jX\ZPm#-sWl!e;R)S81>d=4:>&5XO<1gL5;*>8g(m_=uGM&k-[R%1[H[NZV?Mb;7rk6a@E!-!K1nZ)q5[DR<48rGaHn\FS(3KifOQpY7k*E64`0SM+XSh1,.M8RCJ8n#NFDB>/iS>9;l@]2,^<Qa@u=S%IA)u8*`$\mgBDT`iua$`*oGV?736h_.6b;In`AQSQ47I,@j=4R$?A'^Yq/#gYp4:!-,"^4LY6\E,&>HULRO&UGS[A1Zp2!l0DH>o%(Zn/j`Wr3DTM99nfY&J_%9k>eihiRCi&1tE2f`g"FXl;-@(jA,as&Gb`)p5PO\H.Dj0kbl3EQ=R90Lb1+SZON7S=_E_F@n@;0lH\%YH:E_$!aTKpm`m.)A"aD_>?3-K?%5:"uY.5bAr?!k"$nBCpbgOWcVtVXC`!/=:%ENI&H8:,NfkdCo86j%fq>a<bn8&[<fhF4bjh2%HBuc+VPQ#H$(2m>TCZ5lkEIB&%S!n$-L)eIbjgqNh$H)MbbF?m+5CH"K&X;YMRljIJ+WG8mt$Y^J8<eC&1boO?3f[GPCq;b&U&+;%#E]rK4((nP/H&)@-eM@%]I>7mL_(o5@6eccHnddZOY;$"!_JJ2[$=hO!fO^s/pYrg,I#k&e$cU]2tJ`6&Zq$X6Y75TfaN+WlkbSe%e4f7E#-@MD85sH"f!aFS#.HJV>0($cNd5BtVmUhC.ggsWQ=NFd2mPp\*Fi>jnB;Fo7ZTHJS@@&LOVrbE2"t#`T=%*)0,#3923[pJ%:f/2n/HiJq<^[>cCmn[ICJ#%6,e?H5dA\Q8;n<qABo\MPJ6\;,XfnL6nn>Jd8=gu=W&6DhS--q;p8EA^eoTs#1q\u3Vu,QD7Zo\s%n@]RPOiOoPSRhjYiD\GS;OZjk.g_8(XdoeLhO&Om2G.;&("@)g/O2@4qLBkK-I03$(b!!d2jWK&+c)$C7/2kQ"X_K6LT@;=N&UiH%pq);$p;QWN*ToZGCM3b[q),2<jNLkIh6C[,FgXe[eUTJE1oCa;/C_![+f\0@gV?_n[Scr7Lu.ACQF_lZ-=uR3_=sBF+QS226XbM*%k!A4R3&b_Bntkg(:m4L@,NP(HRBN>2kZ]q*p[i.86+.bGNWsHQ[A`F<:5oa?E1V1*W/Y"hZ<Snr:g0pUQF@RmX@e8JPV8E5[.BSg%#6GF<H;gja&'8CB[<#@fL6?kBB*IV0_(l?XdI9"gTM,Z,X6j&-aKoR1H<]/,"U/Z7JtCL5UO5akVBfbhCJ,D?-P:9jV@.+cZKJ?r%ZJW)kYYJ!R8/RZA6jf8o@6VkK(J'f-X_"=/Z'&8!8:k=W%u:dW!E;C:X@OQB,X)jmn9!a3@KdC1-/5%'[.Rn:J'34S_K:6d]T'M&%nlChUpLaFs[+=k5p&GVn<>r9DU]QFV6L2YBg5ZdVC;hNem)KG9@0.<?ZJq:`@qU&P5R^3FNG(B=&^Y]YX-8r>/)kTOYssJPg281k%b"Q&@;fDk*CM@'Fp5@ogCA<E%$#BUl_q(\m^SmHP:RuZHpcU?r80&YA>HJf,Q.lG@";*9s1%hfM"kIn_U!=^DJ94Ju-*.fJam07*%TWQ'OLcSNr3ZoDoiinM@`^ACuA!qS\/u1$sl:e[lI`6t#G2Z6:&:#s+G&`JXa/Bb'"5]s@*6O&^Y%m=fR=K$8$*BmkPqn!\GK,5\%0@-Gn9:)RUH@=d[bB%=AcTZ#+/FKSkYPr0_s8)CEkKc@uh-==??elX'n"88q=T-kJeEY?)mc!HiqHj/4C3+n'i,EmiIHob^m_8eE%\!5'Kf60B\Is<Xe*ZZ6gYNDlLjJPf03*b@uhV-'^R+be0S6Gr"l\#4-<uu`q?/+)dbZDb^Y+"5gmd<<lcEGA,[O5F,n*u0[qtX[d%4,9^rBn/(5o)!D)?gC)R_aU1^^\D@(bl7pL*Gg-~>%AI9_PrivateDataEnd